from cola_utils import *
from cola_annots import cola

# TODO atoms not currently used

@cola
def compute_starts(starts: T, strides, idxs, T: type) -> T:
  if staticlen(idxs) == 0:
    return ()
  else:
    if isinstance(idxs[0], slice):
      start = ~idxs[0].start if idxs[0].start else 0
      return (start * strides[0] + starts[0],) + compute_starts(starts[1:], strides[1:], idxs[1:])
    elif isinstance(idxs[0], int):
      return (idxs[0] * strides[0] + starts[0],) + compute_starts(starts[1:], strides[1:], idxs[1:])
    else:
      compile_error('Invalid index')

@cola
def compute_strides(strides: T, idxs, T: type) -> T:
  if staticlen(idxs) == 0:
    return ()
  else:
    if isinstance(idxs[0], slice):
      stride = ~idxs[0].step if idxs[0].step else 1
      return (stride * strides[0],) + compute_strides(strides[1:], idxs[1:])
    elif isinstance(idxs[0], int):
      return (strides[0],) + compute_strides(strides[1:], idxs[1:])
    else:
      compile_error('Invalid index')

@cola
def compute_dims(dims: T, idxs, T: type) -> T:
  if staticlen(idxs) == 0:
    return ()
  else:
    if isinstance(idxs[0], slice):
      start = ~idxs[0].start if idxs[0].start else 0
      stop = ~idxs[0].stop if idxs[0].stop else dims[0]
      stride = ~idxs[0].step if idxs[0].step else 1
      return ((stop-start-1)//stride + 1,) + compute_dims(dims[1:], idxs[1:])
    elif isinstance(idxs[0], int):
      return (1,) + compute_dims(dims[1:], idxs[1:])
    else:
      compile_error('Invalid index')

@cola
def delinearize_inner(lidx: int, dims):
  if staticlen(dims) == 0:
    return (lidx,)
  else:
    mul = tup_mul_reduce(dims)
    c = lidx // mul
    return (c,) + delinearize_inner(lidx % mul, dims[1:])

@cola
def delinearize(lidx: int, dims):
  if staticlen(dims) == 1:
    return (lidx,)
  else:
    return delinearize_inner(lidx,dims[1:])

@cola
def linearize[T](coord: T, dims: T):
  if staticlen(coord) == 1:
    return coord[0]
  else:
    mul = coord[0] * tup_mul_reduce(dims[1:])
    return mul + linearize(coord[1:], dims[1:])

@cola
def pad_str(e: E, m: int, X: type, E: type):
  amt = m-len(str(X(e)))+1    
  return str(X(e)) + ' ' * amt

class VirtualStorage[E,T]:
  # These are the parameters of the actual block of data 
  dstarts: T
  dstrides: T
  ddims: T
  dnunits: int
  data: Ptr[E]
  # These are the parameters of the view
  # In the case of a "Block", these are the same as the above.
  starts: T
  strides: T
  dims: T
  nunits: int # size of the virtual location

  @cola
  def __init__(self, dstarts: T, dstrides: T, ddims: T, starts: T, strides: T, dims: T, data: Ptr[E]):
    nunits = 1
    for d in dims:
      nunits *= d
    dnunits = 1
    for d in ddims:
      dnunits *= d
    self.dstarts = dstarts
    self.dstrides = dstrides
    self.ddims = ddims
    self.dnunits = dnunits
    self.starts = starts
    self.strides = strides
    self.dims = dims
    self.data = data
    self.nunits = nunits

  def __init__(self, storage, data: Ptr[E]):
    self.dstarts = storage.dstarts
    self.dstrides = storage.dstrides
    self.ddims = storage.ddims
    self.dnunits = storage.dnunits
    self.starts = storage.starts
    self.strides = storage.strides
    self.dims = storage.dims
    self.data = data
    self.nunits = storage.nunits

  @cola
  def __getitem__(self, idxs) -> VirtualStorage[E,T]:
    if isinstance(idxs, VirtualStorage):
      return VirtualStorage(self.dstarts, self.dstrides, self.ddims, idxs.starts, idxs.strides, 
                            idxs.dims, self.data)
    elif isinstance(idxs, int) or isinstance(idxs, slice):
      if 1 < staticlen(self.dims):
        return self[pad(self, (idxs,))]
      else:
        starts = compute_starts(self.starts, self.strides, (idxs,))
        strides = compute_strides(self.strides, (idxs,))
        dims = compute_dims(self.dims, (idxs,))
        return VirtualStorage(self.dstarts, self.dstrides, self.ddims, starts, strides, dims, self.data)
    elif isinstance(idxs, tuple):
      if staticlen(idxs) > staticlen(self.dims):
        compile_error('Too many indices specified.')
      elif staticlen(idxs) < staticlen(self.dims):
        return self[pad(self, idxs)]
      else:
        starts = compute_starts(self.starts, self.strides, idxs)
        strides = compute_strides(self.strides, idxs)
        dims = compute_dims(self.dims, idxs)
        return VirtualStorage(self.dstarts, self.dstrides, self.ddims, starts, strides, dims, self.data)

  @cola
  def __setitem__(self, idxs, val: E):
    rel = self[idxs]
    for coord in rel:
      # make it absolute
      coord = compute_starts(rel.starts, rel.strides, coord)
      # now relative to the block
      rcoord = tup_fdiv(tup_sub(coord, self.dstarts), 
                        self.dstrides)
      lidx = linearize(rcoord, self.ddims)
      if lidx >= self.dnunits:
        # TODO make into a raise error
        print f'Bad idxs {idxs} ({lidx})'
        assert False 
      self.data[lidx] = val      

  @cola
  def __call__(self, *idxs) -> E:
    if staticlen(idxs) == 0:
      compile_error('idxs is an empty tuple. Did you use * with an integer argument?')
    elif staticlen(idxs) > staticlen(self.dims):
      compile_error('Too many indices specified.')
    elif staticlen(idxs) < staticlen(self.dims):      
      p = pad_call(self, *idxs) 
      return self.__call__(*p)
    else:
      for i in idxs:
        if not isinstance(i, int):
          compile_error('Must be integer index')
      # get relative to self
      coord = compute_starts(self.starts, self.strides, idxs)
      # now relative to the block
      rcoord = tup_fdiv(tup_sub(coord, self.dstarts), 
                        self.dstrides)
      lidx = linearize(rcoord, self.ddims)
      if lidx >= self.dnunits:
        # TODO make into a raise error
        print f'Bad idxs {idxs} {lidx} {coord} {rcoord} {self.ddims}'
        assert False 
      return self.data[lidx]    

  @cola
  def __iter__(self) -> Generator[T]:
    for i in range(self.nunits):
      coord = delinearize(i, self.dims)
      yield coord

  @cola
  def _grid_inner(self, idx: Static[int], grid_dims: T) -> Generator[VirtualStorage[E,T]]:
    d = grid_dims[idx]
    nsplits = self.dims[idx] // d
    if self.dims[idx] % d != 0:
      nsplits += 1
    for n in range(nsplits):
      region = tuple_fill(slice(), idx) + (slice(n*d,n*d+d,1),) + tuple_fill(slice(),staticlen(grid_dims)-idx-1)
      split = self[region]
      if idx == staticlen(grid_dims) - 1:
        yield split
      else:
        yield from split._grid_inner(idx+1,grid_dims)      
      
  @cola
  def grid(self, grid_dims: T) -> Generator[VirtualStorage[E,T]]:
    yield from self._grid_inner(0, grid_dims)

  # check if this view is completely within other
  @cola
  def within(self, other):
    y,x = self.starts
    oy,ox = other.starts
    if y < oy or x < ox:
      return False # origin outside
    dy,dx = self.dims
    sy,sx = self.strides
    ody,odx = other.dims
    osy,osx = other.strides
    if (dy*sy+y > ody*osy+oy) or (dx*sx+x > odx*osx+ox):
      return False
    else:
      return True
  
  # returns with absolute value (so no stride considered)
  @cola
  def starts_relative_to(self, other):
    return tup_sub(self.starts, other.starts)

  @cola
  def exists(self):
    # need to see if the data in the block exists, which means [start,start+dim) is in bounds
    # relative to the block
    lower_bound_valid = tup_gte_reduce(self.starts, self.dstarts)
    upper_bound_self = tup_add(self.starts, tup_mul(self.dims,self.strides))
    upper_bound_block = tup_add(self.dstarts, tup_mul(self.ddims,self.dstrides))
    upper_bound_valid = tup_lte_reduce(upper_bound_self, upper_bound_block)
    all_valid = lower_bound_valid and upper_bound_valid
    return all_valid  
    
  # logically exists if the indices are >= 0, so doesn't care about the actual block
  @cola
  def logically_exists(self):
    exists = True
    for start in self.starts:
      exists &= (start >= 0)
    return exists

  @cola
  def max_str_len(self, X: type):
    m = 0
    for coord in self:
      s = X(0)
      if isinstance(coord, tuple):
        s = X(self(*coord))
      else:
        s = X(self(coord))
      l = len(str(s))
      if l > m:
        m = l
    print f'm is {m}'
    return m

  @cola
  def str_like(self, X: type):
    if staticlen(self.dims) > 3:
      compile_error('Can only string print for 1D, 2D, and 3D blocks')
    m = self.max_str_len(X)
    s = ''
    if staticlen(self.dims) == 1:
      for i in range(len(self)):
        s += pad_str(self(i), m, X)
    elif staticlen(self.dims) == 2:
      for i in range(self.dims[0]):
        for j in range(self.dims[1]):
          s += pad_str(self(i,j), m, X)
        s += '\n'
    else:
      for i in range(self.dims[0]):
        s += f'i = {i}\n'
        for j in range(self.dims[1]):      
          for k in range(self.dims[2]):
            q = f'{pad_str(self(i,j,k), m, X)}'
            s += q
          s += '\n'
        s += '\n'    
    return s

  @cola
  def __str__(self):
    t =  '(' + ','.join('int' for _ in range(len(self.dims))) + ')'
    s =  'VirtualStorage[' + t + ']:\n'
    t =  '(' + ','.join(str(i) for i in self.starts) + ')'
    s += '  starts: ' + t + '\n'
    t =  '(' + ','.join(str(i) for i in self.strides) + ')'
    s += '  strides: ' + t + '\n'
    t =  '(' + ','.join(str(i) for i in self.dims) + ')'
    s += '  dims: ' + t + '\n'
    return s

  # TODO make all of these private
  @cola
  def get_starts(self) -> T:
    return self.starts

  @cola
  def get_strides(self) -> T:
    return self.strides

  @cola
  def get_dims(self) -> T:
    return self.dims

  @cola
  def get_dstarts(self) -> T:
    return self.dstarts

  @cola
  def get_dstrides(self) -> T:
    return self.dstrides

  @cola
  def get_ddims(self) -> T:
    return self.ddims

  @cola
  def get_data(self) -> Ptr[E]:
    return self.data

class Block[E,T]:
  storage: VirtualStorage[E,T]

class View[E,T]:
  storage: VirtualStorage[E,T]

@extend
class Block:
  
  @cola
  def __init__(self, dims: T):
    self.__init__(tuple_fill(0, staticlen(dims)), tuple_fill(1, staticlen(dims)), dims)

  @cola
  def __init__(self, dims: T, init: list[E]):
    self.__init__(tuple_fill(0, staticlen(dims)), tuple_fill(1, staticlen(dims)), dims, init)

  @cola
  def __init__(self, obj):
    if isinstance(obj, Block):
      self.__init__(obj.get_starts(), obj.get_strides(), obj.get_dims())
    elif isinstance(obj, View):
      self.__init__(obj.get_starts(), obj.get_strides(), obj.get_dims())
    else:
      compile_error('Invalid type to Block.init')    

  @cola
  def __init__(self, starts: T, strides: T, dims: T):
    if not isinstance(T, tuple):
      compile_error('T must be a tuple')
    nunits = 1
    for d in dims:
      nunits *= d
    data = Ptr[E](nunits)
    self.storage = VirtualStorage[E,T](starts, strides, dims, starts, strides, dims, data)
  
  @cola
  def __init__(self, starts: T, strides: T, dims: T, init: list[E]):
    if not isinstance(T, tuple):
      compile_error('T must be a tuple')
    nunits = 1
    for d in dims:
      nunits *= d
    data = Ptr[E](nunits)
    for i in range(nunits):
      data[i] = init[i]
    self.storage = VirtualStorage[E,T](starts, strides, dims, starts, strides, dims, data)

  @cola
  def str_like(self, X: type):
    return self.storage.str_like(X)

  @cola
  def get_starts(self):
    return self.storage.starts

  @cola
  def get_strides(self):
    return self.storage.strides

  @cola
  def get_dims(self):
    return self.storage.dims

  @cola
  def get_dstarts(self):
    return self.storage.dstarts

  @cola
  def get_dstrides(self):
    return self.storage.dstrides

  @cola
  def get_ddims(self):
    return self.storage.ddims

  @cola
  def __len__(self):
    return self.storage.nunits

  @cola
  def __getitem__(self, idxs):
    if isinstance(idxs, Block) or isinstance(idxs, View):
      return self.storage[idxs.storage]
    else:
      return self.storage[idxs]

  @cola
  def __setitem__(self, idxs, obj):
    if isinstance(idxs, Block) or isinstance(idxs, View):
      self.storage[idxs.storage] = obj
    else:
      self.storage[idxs] = obj    

  @cola
  def __call__(self, *idxs) -> E:
    return self.storage(*idxs)

  @cola
  def __iter__(self):
    yield from self.storage

  @cola
  def grid(self, grid_dims):
    for vs in self.storage.grid(grid_dims):
      yield View(vs)

@extend
class View:

  @cola
  def __init__(self, starts: T, strides: T, dims: T, dstarts: T, dstrides: T, ddims: T, data: Ptr[E]):
    if not isinstance(T, tuple):
      compile_error('T must be a tuple')
    self.storage = VirtualStorage(starts, strides, dims, dstarts, dstrides, ddims, data)

  @cola
  def __init__(self, obj: Block[E,T]):
    self.__init__(obj.get_starts(), obj.get_strides(), obj.get_dims(), obj.get_dstarts(), obj.get_dstrides(), obj.get_ddims(), obj.storage.data)

  @cola
  def __init__(self, obj: View[E,T]):
    self.__init__(obj.get_starts(), obj.get_strides(), obj.get_dims(), obj.get_dstarts(), obj.get_dstrides(), obj.get_ddims(), obj.storage.data)

  @cola
  def str_like(self, X: type):
    return self.storage.str_like(X)

  @cola
  def get_starts(self):
    return self.storage.starts

  @cola
  def get_strides(self):
    return self.storage.strides

  @cola
  def get_dims(self):
    return self.storage.dims

  @cola
  def get_dstarts(self):
    return self.storage.dstarts

  @cola
  def get_dstrides(self):
    return self.storage.dstrides

  @cola
  def get_ddims(self):
    return self.storage.ddims

  @cola
  def __len__(self):
    return self.storage.nunits

  @cola
  def __getitem__(self, idxs):
    if isinstance(idxs, Block) or isinstance(idxs, View):
      return self.storage[idxs.storage]
    else:
      return self.storage[idxs]

  @cola
  def __setitem__(self, idxs, obj):
    if isinstance(idxs, Block) or isinstance(idxs, View):
      self.storage[idxs.storage] = obj
    else:
      self.storage[idxs] = obj

  @cola
  def __call__(self, *idxs) -> E:
    return self.storage(*idxs)

  @cola
  def __iter__(self):
    yield from self.storage

  @cola
  def grid(self, grid_dims):
    for vs in self.storage.grid(grid_dims):
      yield View(vs)

@extend
class File:

  def read(self, block: Block[byte,T], T: type):
    self._ensure_open()
    ret = _C.fread(block.storage.data, 1, len(block), self.fp)
    self._errcheck("error in read")
    return ret

  def readline(self):
      self._ensure_open()
      rd = _C.getline(Ptr[Ptr[byte]](self.__raw__() + 8), Ptr[int](self.__raw__()), self.fp)
      if rd != -1:
          return str(self.buf, rd)
      else:
          return ''       
