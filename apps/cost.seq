from cola.block import *
from transforms import Hadamard

# https://www.intechopen.com/books/multimedia/bit-rate-estimation-for-cost-function-of-h-264-avc
# https://link.springer.com/content/pdf/10.1007/s11760-011-0267-z.pdf

def sad(reference, estimate) -> int:
  cost = 0
  for r,p in scan(reference, estimate):
    cost += abs(r() - p())
  return cost

def ssd(reference, estimate) -> int:
  cost = 0
  for r,p in scan(reference, estimate):
    cost += (r() - p()) ** 2
  return cost

def satd(reference, estimate) -> int:
  cost = 0
  for h in scan(Hadamard.hadamard(reference, estimate)):
    cost += abs(h())
  return cost

def lambda_Sullivan_Wiegand(QP: int):
  return 0.85 * 2 ** ((QP-12)//3)

def rate_distortion_ssd(reference, estimate, lambda_val: int, R: int) -> int:
  return ssd(reference, estimate) + lambda_val * R

# P = 0 for most probable mode
def rate_distortion_sad(reference, estimate, lambda_val: int, P: bool) -> int:
  return sad(reference, estimate) + lambda_val * int(P)

# P = 0 for most probable mode
def rate_distortion_satd(reference, estimate, lambda_val: int, P: bool) -> int:
  return satd(reference, estimate) + lambda_val * int(P)

def run_tests():
  ref4x4 = Block[int,2](4,4).default_fill(1)
  ref8x8 = Block[int,2](8,8).default_fill(1)
  est4x4 = Block[int,2](4,4).default_fill(2)
  est8x8 = Block[int,2](8,8).default_fill(2)

  @test
  def t0():
    diff = ref4x4-est4x4
    assert diff == [0,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15]
  t0()

  print(satd(ref4x4, est4x4))
#  satd(ref8x8, est8x8)

run_tests()
