from video import *
from funcs import *

# ok, every document/paper/website absolutely sucks at describing quantization, and I still don't fully
# understand it. I don't care about the theory, but I just wanted to understand practically what
# the computation is. 

# Quantization in H264 isn;t just a simple division, because it has to include some scaling that
# was removed from the DCT inorder to make the DCT integer based.
# So, the actual quantization function is
# z_ij = (coeff_ij * m(QP%6,i,j)) >> (15 + floor(QP/6)
# 
# Here's where those values come from:
# z_ij is the quantized value
# coeff_ij is the coefficient that directly comes from the DCT
# i,j is the coordinate
# QP is the quantization parameter for the current context (see below)
# 15 is some scaling factor that the Richardson book says is a good value to use
# m is a table that represents some other precomputable-scaling-factors. I don't care how
# they are derived, I just care that they are precomputable. See below
#
# QP:
# So the qp parameter depends on whether you are luma or chroma, and whether you have adjusted it
# There is an initial global quantization value specified with the parameter
# pic_qp_init_minus26. Technically it's not global, but local to the picture parameter set. But I don't care.
# Now, you can also specify a deviation from this for each slice. That parameter is
# slice_qp_delta. Same with a macroblock, which is mb_qp_delta. So, when we actually get to quantization,
# for a LUMA component, qp_y is calculated with a nasty computation. Here it is broken down
# qp_slice = pic_qp_init_minus26 + 26 + slice_qp_delta
# QPY = ((qp_prev + mb_qp_delta + 52 + 2 * QpBdOffsetY) % (52 + QpBdOffsetY)) - QpBdOffsetY
# qp_prev is the qp for the prior macroblock (in decoding order) (initially set to qp_slice)
# QpBdOffsetY is derived from the parameter bit_depth_luma_minus8, and 
# QpBdOffsetY = 6 * bit_depth_luma_minus8. bit_depth_luma_minus8 is usually 0, so yeah.
# A good value for pic_qp_init_minus26 is 0. So assuming slice_qp_delta is 0 and QpBdOffsetY is 0, 
# QPY = 26.
# 
# For chroma, it's a little different. It's based off of the QPy
# but can have some other offsets.
# In the pic parameter set, theres chroma_qp_index_offset and second_chroma_qp_index_offset.
# The first controls the offset for Cb, and the latter for Cr.
# For Cb, compute QPCb as:
# index = Clip3(-QpBdOffsetC,51,QPY+chroma_qp_index_offset)
# lookup the index based on table 8-15. where index <=> qPI.
# 
# For Cr, it's the same, except use second_chroma_qp_index_offset.
# QpBdOffsetC is 6*bit_depth_chroma_minus8, so is likely also 0.
# In reality, it'll probs just be the same as for luma.
# Anyway, now you have the QP values to acutally use in the stupid quantization thing.
#
# m:
# This part confuses me, but there's the table
# QP  n=0   n=1  n=2
# 0  13107 5243 8066
# 1  11916 4660 7490
# 2  10082 4194 6554
# 3  9362  3647 5825
# 4  8192  3355 5243
# 5  7282  2893 4559
# Here, you index into this as m(QP%6,n), where n is derived from the coordinate i,j values.
# n = | 0 if i%2==0 && j%2==0
#     | 1 if i%2==1 && j%2==1
#     | 2 otherwise
# so n mapped to the 4x4 block looks like
# 0 | 2 | 0 | 2
# 2 | 1 | 2 | 1
# 0 | 2 | 0 | 2
# 2 | 1 | 2 | 1
#
# Again, very confused where all of the scaling factors that go into this come from. But
# I trust the smart compression people, so I'm going with it

@dataclass(init=False)
class Quant:
  # for quant
  m_table: Block[int,Tup2]
  # for dequant
  v_table: Block[int,Tup2]

  def __init__(self):
    self.m_table = Block[int,Tup2]((6,3))
    self.m_table[0,0] = 13107
    self.m_table[0,1] = 5243
    self.m_table[0,2] = 8066
    self.m_table[1,0] = 11916
    self.m_table[1,1] = 4660
    self.m_table[1,2] = 7490
    self.m_table[2,0] = 10082
    self.m_table[2,1] = 4194
    self.m_table[2,2] = 6554
    self.m_table[3,0] = 9362
    self.m_table[3,1] = 3647
    self.m_table[3,2] = 5825
    self.m_table[4,0] = 8192
    self.m_table[4,1] = 3355
    self.m_table[4,2] = 5243
    self.m_table[5,0] = 7282
    self.m_table[5,1] = 2893
    self.m_table[5,2] = 4559

    self.v_table = Block[int,Tup2]((6,3))
    self.v_table[0,0] = 10
    self.v_table[0,1] = 16
    self.v_table[0,2] = 13
    self.v_table[1,0] = 11
    self.v_table[1,1] = 18
    self.v_table[1,2] = 14
    self.v_table[2,0] = 13
    self.v_table[2,1] = 20
    self.v_table[2,2] = 16
    self.v_table[3,0] = 14
    self.v_table[3,1] = 23
    self.v_table[3,2] = 18
    self.v_table[4,0] = 16
    self.v_table[4,1] = 25
    self.v_table[4,2] = 20
    self.v_table[5,0] = 18
    self.v_table[5,1] = 29
    self.v_table[5,2] = 23

def basic_quantization(coeffs, qcoeffs, qp, quant: Quant):
  bits = 15 + qp // 6
  for i in range(4):
    i2 = i % 2
    for j in range(4):
      j2 = j % 2
      n = 0 if (i2 == 0 and j2 == 0) else (1 if (i2 == 1 and j2 == 1) else 2)
      coeff = coeffs(i,j)
      qcoeffs[i,j] = (coeff * quant.m_table(qp % 6, n)) >> bits
    
# for decoding, run this before idct on 4x4 blocks
def pre_idct_scale(qcoeffs, coeffs, qp, quant: Quant):
  # weight scale defaults to 16 (see page 75 of standard)
  weight_scale = 16
  if qp >= 24:    
    bits = (qp//6 - 4)
    for i in range(4):
      i2 = i % 2
      for j in range(4):
        j2 = j % 2
        n = 0 if (i2 == 0 and j2 == 0) else (1 if (i2 == 1 and j2 == 1) else 2)
        term = qcoeffs(i,j) * weight_scale * quant.v_table(qp % 6, n)
        term <<= bits
        coeffs[i,j] = clip3(-2**15, 2**15-1, term)
  else:
    bits = 4 - qp//6
    for i in range(4):
      i2 = i % 2
      for j in range(4):
        j2 = j % 2
        n = 0 if (i2 == 0 and j2 == 0) else (1 if (i2 == 1 and j2 == 1) else 2)
        term = qcoeffs(i,j) * weight_scale * quant.v_table(qp % 6, n) + 2 ** (3 - qp//6)
        term >>= bits
        coeffs[i,j] = clip3(-2**15, 2**15-1, term)

# after the ihadamard, but before the idct. just on the dcs
def post_hadamard_chroma_DC_scale(qcoeffs, coeffs, qp, quant: Quant):
  # weight scale defaults to 16 (see page 75 of standard)
  weight_scale = 16
  for i in range(2):
    for j in range(2):
      term = qcoeffs(i,j) * weight_scale * quant.v_table(qp % 6, 0)
      term <<= (qp // 6)
      term >>= 5
      coeffs[i,j] = clip3(-2**15, 2**15-1, term)  

# for decoding, run this after idct on 4x4 blocks
def post_idct_scale(coeffs, out_coeffs):
  for i in range(4):
    for j in range(4):
      out_coeffs[i,j] = clip3(-2**15, 2**15-33, (coeffs(i,j)+32) >> 6)
      
