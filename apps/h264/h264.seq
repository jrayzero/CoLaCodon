from yuv import *
from cfg import *
from syntax import *
from collections import *
from constants import *
from pcm import *

def init_encoder():
  state = EncoderState()
  state.profile_idc = profile_idc
  state.level_idc = level_idc
  state.pic_H = height
  state.pic_W = width
  return state

def main():
  assert height % 8 == 0 and width % 8 == 0
  yuv420 = YUV420Reader(input_fn, height, width, nframes)
  bitstream = AnnexBBitstream(output_fn)
  state = init_encoder()
  sps = SPS()
  pps = PPS() 
  state.active_sps[sps.sps_id] = sps
  state.active_pps[pps.pps_id] = pps
  bitstream.generate_sps(sps, state)
  bitstream.generate_pps(pps, state)
  frame_idx = 0
  # go through frames
  for Y,Cb,Cr in yuv420:
    if no_compress:
      PCM_only(frame_idx == 0, Y, Cb, Cr, state, bitstream)
    else:
      assert False
      # output frames that hold the macroblocks that need to be entropy coded
      Y_out = Block[int,Tup2](Y)
      Cb_out = Block[int,Tup2](Cb)
      Cr_out = Block[int,Tup2](Cr)
      # output frames that hold the reconstructed macroblocks
      Y_recons  = Block[int,Tup2](Y)
      Cb_recons = Block[int,Tup2](Cb)
      Cr_recons = Block[int,Tup2](Cr)
    frame_idx += 1
  yuv420.cleanup()
  bitstream.cleanup()

main()
