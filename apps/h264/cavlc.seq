from cola.blocks import *
from constants import *
from ..common.typedefs import *
from video import *

zigzag = [(0,0),(0,1),(1,0),(2,0),(1,1),(0,2),(0,3),(1,2),(2,1),(3,0),(3,1),(2,2),(1,3),(2,3),(3,2),(3,3)]

tbl_9_5_nC_neg_1_bits = Block[int,Tup2]((4,5),
                                        [2,6,6,6,6,
                                         0,1,6,7,8,
                                         0,0,3,7,8,
                                         0,0,0,6,7])

tbl_9_5_nC_neg_1_codenum = Block[int,Tup2]((4,5),
                                           [1,7,4,3,2,
                                            0,1,6,3,3,
                                            0,0,1,2,2,
                                            0,0,0,5,0])
                                                                                                                                   
tbl_9_5_vlc_bits = Block[int,Tup3]((3,4,17),
                                   [1, 6, 8, 9,10,11,13,13,13,14,14,15,15,16,16,16,16,
                                    0, 2, 6, 8, 9,10,11,13,13,14,14,15,15,15,16,16,16,
                                    0, 0, 3, 7, 8, 9,10,11,13,13,14,14,15,15,16,16,16,
                                    0, 0, 0, 5, 6, 7, 8, 9,10,11,13,14,14,15,15,16,16,        
                                    2, 6, 6, 7, 8, 8, 9,11,11,12,12,12,13,13,13,14,14,
                                    0, 2, 5, 6, 6, 7, 8, 9,11,11,12,12,13,13,14,14,14,
                                    0, 0, 3, 6, 6, 7, 8, 9,11,11,12,12,13,13,13,14,14,
                                    0, 0, 0, 4, 4, 5, 6, 6, 7, 9,11,11,12,13,13,13,14,      
                                    4, 6, 6, 6, 7, 7, 7, 7, 8, 8, 9, 9, 9,10,10,10,10,
                                    0, 4, 5, 5, 5, 5, 6, 6, 7, 8, 8, 9, 9, 9,10,10,10,
                                    0, 0, 4, 5, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9,10,10,10,
                                    0, 0, 0, 4, 4, 4, 4, 4, 5, 6, 7, 8, 8, 9,10,10,10])
tbl_9_5_vlc_codenum = Block[int,Tup3]((3,4,17),
                                      [1, 5, 7, 7, 7, 7,15,11, 8,15,11,15,11,15,11, 7,4,
                                       0, 1, 4, 6, 6, 6, 6,14,10,14,10,14,10, 1,14,10,6,
                                       0, 0, 1, 5, 5, 5, 5, 5,13, 9,13, 9,13, 9,13, 9,5,
                                       0, 0, 0, 3, 3, 4, 4, 4, 4, 4,12,12, 8,12, 8,12,8,
                                       3,11, 7, 7, 7, 4, 7,15,11,15,11, 8,15,11, 7, 9,7,
                                       0, 2, 7,10, 6, 6, 6, 6,14,10,14,10,14,10,11, 8,6,
                                       0, 0, 3, 9, 5, 5, 5, 5,13, 9,13, 9,13, 9, 6,10,5,
                                       0, 0, 0, 5, 4, 6, 8, 4, 4, 4,12, 8,12,12, 8, 1,4,                                           
                                       15,15,11, 8,15,11, 9, 8,15,11,15,11, 8,13, 9, 5,1,
                                       0,14,15,12,10, 8,14,10,14,14,10,14,10, 7,12, 8,4,
                                       0, 0,13,14,11, 9,13, 9,13,10,13, 9,13, 9,11, 7,3,
                                       0, 0, 0,12,11,10, 9, 8,13,12,12,12, 8,12,10, 6,2])        

tbl_9_7_and_9_8 = Block[Tup2,Tup2]((16,15), [(1, 1), (7, 3), (5, 4), (3, 5), (5, 4), (1, 6), (1, 6), (1, 6), (1, 6), (1, 5), (0, 4), (0, 4), (0, 3), (0, 2), (0, 1), (3, 3), (6, 3), (7, 3), (7, 3), (4, 4), (1, 5), (1, 5), (1, 4), (0, 6), (0, 5), (1, 4), (1, 4), (1, 3), (1, 2), (1, 1), (2, 3), (5, 3), (6, 3), (5, 4), (3, 4), (7, 3), (5, 3), (1, 5), (1, 4), (1, 3), (1, 3), (1, 2), (1, 1), (1, 1), (0, -1), (3, 4), (4, 3), (5, 3), (4, 4), (7, 3), (6, 3), (4, 3), (3, 3), (3, 2), (3, 2), (2, 3), (1, 1), (1, 2), (0, -1), (0, -1), (2, 4), (3, 3), (4, 4), (6, 3), (6, 3), (5, 3), (3, 3), (3, 2), (2, 2), (2, 2), (1, 1), (1, 3), (0, -1), (0, -1), (0, -1), (3, 5), (5, 4), (3, 4), (5, 3), (5, 3), (4, 3), (3, 2), (2, 2), (1, 3), (1, 2), (3, 3), (0, -1), (0, -1), (0, -1), (0, -1), (2, 5), (4, 4), (4, 3), (4, 3), (4, 3), (3, 3), (2, 3), (2, 3), (1, 2), (1, 4), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (3, 6), (3, 4), (3, 3), (3, 4), (3, 3), (2, 3), (1, 4), (1, 3), (1, 5), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (2, 6), (2, 4), (2, 4), (3, 3), (2, 4), (1, 4), (1, 3), (0, 6), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (3, 7), (3, 5), (3, 5), (2, 4), (1, 5), (1, 3), (0, 6), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (2, 7), (2, 5), (2, 5), (2, 5), (1, 4), (0, 6), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (3, 8), (3, 6), (1, 6), (1, 5), (0, 5), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (2, 8), (2, 6), (1, 5), (0, 5), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (3, 9), (1, 6), (0, 6), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (2, 9), (0, 6), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (1, 9), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1)])

tbl_9_9_a = Block[Tup2,Tup2]((4,3), [(1, 1), (1, 1), (1, 1), (1, 2), (1, 2), (0, 1), (1, 3), (0, 2), (0, -1), (0, 3), (0, -1), (0, -1)])

tbl_9_9_b = Block[Tup2,Tup2]((8,7), [(1, 1), (0, 3), (0, 3), (6, 3), (0, 2), (0, 2), (0, 1), (2, 3), (1, 2), (1, 3), (0, 2), (1, 2), (1, 2), (1, 1), (3, 3), (1, 3), (1, 2), (1, 2), (2, 2), (1, 1), (0, -1), (2, 4), (4, 3), (2, 2), (2, 2), (3, 2), (0, -1), (0, -1), (3, 4), (5, 3), (6, 3), (7, 3), (0, -1), (0, -1), (0, -1), (1, 4), (6, 3), (7, 3), (0, -1), (0, -1), (0, -1), (0, -1), (1, 5), (7, 3), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, 5), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1)])

tbl_9_10 = Block[Tup2,Tup2]((15,7), [(1, 1), (1, 1), (3, 2), (3, 2), (3, 2), (3, 2), (7, 3), (0, 1), (1, 2), (2, 2), (2, 2), (2, 2), (0, 3), (6, 3), (0, -1), (0, 2), (1, 2), (1, 2), (3, 3), (1, 3), (5, 3), (0, -1), (0, -1), (0, 2), (1, 3), (2, 3), (3, 3), (4, 3), (0, -1), (0, -1), (0, -1), (0, 3), (1, 3), (2, 3), (3, 3), (0, -1), (0, -1), (0, -1), (0, -1), (0, 3), (5, 3), (2, 3), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (4, 3), (1, 3), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (1, 4), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (1, 5), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (1, 6), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (1, 7), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (1, 8), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (1, 9), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (1, 10), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (1, 11)])

def compute_nC(coeffs_4x4, nzeros_frame):
  nA = 0
  nB = 0
  nC = 0
  A_avail = False
  B_avail = False
  if coeffs_4x4[0,-1].logically_exists():
    nA = nzeros_frame[coeffs_4x4[0,-1]](0,0)    
    A_avail = True
  if coeffs_4x4[-1,0].logically_exists():    
    nB = nzeros_frame[coeffs_4x4[-1,0]](0,0)
    B_avail = True    
  if A_avail and B_avail:
    nC = (nA + nB + 1) >> 1
  elif A_avail:
    nC = nA
  elif B_avail:
    nC = nB 
  return nC

def gather_cavlc_stats_raster(coeffs):
  trailing_zeros = 0
  total_zeros = 0
  cur_zero_run = 0
  total_nz_coeffs = 0
  nz_coeffs = [0] * 16
  zero_runs = [0] * 16
  zero_runs_idx = 0
  trailing_ones_bitmask = 0
  ntrailing_ones = 0  
  for coeff in coeffs:
    if coeff != 0:
      nz_coeffs[total_nz_coeffs] = coeff
      total_nz_coeffs += 1
      trailing_zeros = 0
      zero_runs[zero_runs_idx] = cur_zero_run
      zero_runs_idx += 1
      cur_zero_run = 0
      if coeff == -1:
        trailing_ones_bitmask |= (1 << ntrailing_ones)
        ntrailing_ones += 1
      elif coeff == 1:
        # bit is just a zero, don't need to OR it
        ntrailing_ones += 1        
      else:
        trailing_ones_bitmask = 0
        ntrailing_ones = 0
    else:
      trailing_zeros += 1
      total_zeros += 1
      cur_zero_run += 1
  # don't want to count trailing zeros
  total_zeros = total_zeros - trailing_zeros
  if ntrailing_ones > 3:
    shift = ntrailing_ones-3
    ntrailing_ones = 3
    trailing_ones_bitmask >>= shift # remove earlier ones at the front
  return trailing_zeros,total_zeros,total_nz_coeffs,nz_coeffs,zero_runs,zero_runs_idx,trailing_ones_bitmask,ntrailing_ones
  
def gather_cavlc_stats_zigzag(coeffs, skip_DC):
  ziter = iter(zigzag)
  trailing_zeros = 0
  total_zeros = 0
  cur_zero_run = 0
  total_nz_coeffs = 0
  nz_coeffs = [0] * 16
  zero_runs = [0] * 16
  zero_runs_idx = 0
  trailing_ones_bitmask = 0
  ntrailing_ones = 0  
  if skip_DC:
    next(ziter)
  for coord in ziter:
    coeff = coeffs(*coord)
    if coeff != 0:
      nz_coeffs[total_nz_coeffs] = coeff
      total_nz_coeffs += 1
      trailing_zeros = 0
      zero_runs[zero_runs_idx] = cur_zero_run
      zero_runs_idx += 1
      cur_zero_run = 0
      if coeff == -1:
        trailing_ones_bitmask |= (1 << ntrailing_ones)
        ntrailing_ones += 1
      elif coeff == 1:
        # bit is just a zero, don't need to OR it
        ntrailing_ones += 1        
      else:
        trailing_ones_bitmask = 0
        ntrailing_ones = 0
    else:
      trailing_zeros += 1
      total_zeros += 1
      cur_zero_run += 1
  # don't want to count trailing zeros
  total_zeros = total_zeros - trailing_zeros
  if ntrailing_ones > 3:
    shift = ntrailing_ones-3
    ntrailing_ones = 3
    trailing_ones_bitmask >>= shift # remove earlier ones at the front
  return trailing_zeros,total_zeros,total_nz_coeffs,nz_coeffs,zero_runs,zero_runs_idx,trailing_ones_bitmask,ntrailing_ones

# The coefficient token represents the total number of nonzeros, as well as the number of trailing ones
def encode_coeff_token(nC: int, ntrailing_ones: int, total_nz_coeffs: int, bitstream):
  nC_idx = 0
  if 2 <= nC < 4:
    nC_idx = 1
  elif 4 <= nC < 8:
    nC_idx = 2
  elif 8 <= nC:
    nC_idx = 3
  elif nC == -1:
    val,nbits = tbl_9_5_nC_neg_1_codenum(ntrailing_ones,total_nz_coeffs),tbl_9_5_nC_neg_1_bits(ntrailing_ones,total_nz_coeffs)
    bitstream.pack(val, nbits)
    return
  elif nC == -2:
    assert False # think this is for chroma array type 2
  val = nbits = 0
  if nC_idx == 3:
    # FLC
    nbits = 6
    if total_nz_coeffs > 0:
      val = ((total_nz_coeffs-1) << 2) | ntrailing_ones
    else:
      val = 3 # all zero
  else:
    val,nbits = tbl_9_5_vlc_codenum(nC_idx, ntrailing_ones, total_nz_coeffs),tbl_9_5_vlc_bits(nC_idx, ntrailing_ones, total_nz_coeffs)#tbl_9_5(ntrailing_ones, total_nz_coeffs, nC_idx)
  bitstream.pack(val, nbits)  

# nelems = 16 for 4x4
# zero runs idx represents the last zero run we found
def encode_runs(total_nz_coeffs, total_zeros, zero_runs_idx, zero_runs, max_nz_coeffs, bitstream):
  zeros_left = 0 if total_nz_coeffs == max_nz_coeffs else total_zeros
  zero_runs_idx -= 1 # it ends 1 beyond the last run
  # you don't encode the final run because it can automatically be inferred
  # so to handle that, we can remove however many zeros are at the front
  #zeros_left -= zero_runs[0]
  coeff_idx = total_nz_coeffs - 1
  while zeros_left > 0 and coeff_idx > 0:
    run_before = zero_runs[zero_runs_idx]    
    zero_runs_idx -= 1
    code,nbits = tbl_9_10(run_before, min(zeros_left-1,6))
    bitstream.pack(code,nbits)
    zeros_left -= run_before
    coeff_idx -= 1

def encode_total_zeros(total_nz_coeffs, total_zeros, max_nz_coeffs, bitstream):
  if total_nz_coeffs == 0 or total_nz_coeffs == max_nz_coeffs:
    return
  tzvlc_idx = total_nz_coeffs
  if max_nz_coeffs == 4:
    code,nbits = tbl_9_9_a(total_zeros, tzvlc_idx-1)
    bitstream.pack(code,nbits)
  elif max_nz_coeffs == 8:
    code,nbits = tbl_9_9_b(total_zeros, tzvlc_idx-1)
    bitstream.pack(code,nbits)
  else:
    code,nbits = tbl_9_7_and_9_8(total_zeros, tzvlc_idx-1)
    bitstream.pack(code,nbits)
    
# THIS PAPER IS A GODSEND https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&arnumber=6183127
def encode_levels(ntrailing_ones, total_nz_coeffs, nz_coeffs, bitstream):
  i = ntrailing_ones
  suffix_length = 0
  if total_nz_coeffs > 10 and ntrailing_ones < 3:
    suffix_length = 1  
  # read nonzeros coeffs in reverse order
  first = True
  for cidx in range(total_nz_coeffs-1-ntrailing_ones,-1,-1):
    coeff = nz_coeffs[cidx]
    first = False
    level_suffix = level_prefix = level_suffix_size = 0
    level_code = 2 * abs(coeff) - (1 if coeff < 0 else 2)
    if i == ntrailing_ones and ntrailing_ones < 3:
      level_code -= 2
    thresh = 7 if suffix_length == 0 else 15*(1 << (suffix_length-1))
    if abs(coeff) > thresh:
      if suffix_length == 0 and abs(coeff) < 16:
        level_prefix = 14
        level_suffix_size = 4
        level_suffix = level_code - level_prefix
      else:
        level_prefix = 15
        if suffix_length == 0:
          level_code -= 15
        level_suffix_size = 12
        level_suffix = level_code - (level_prefix << suffix_length)
    else:
      level_prefix = level_code >> suffix_length
      level_suffix_size = suffix_length
      level_suffix = level_code - (level_prefix << suffix_length)
    if suffix_length == 0:
      suffix_length = 1
    if suffix_length < 6 and (abs(coeff) > (3 << (suffix_length - 1))):
      suffix_length += 1
    # actually encode the stuff
    assert level_prefix <= 15
    for _ in range(level_prefix):
      bitstream.pack(0,1)
    bitstream.pack(1,1)
    bitstream.pack(level_suffix, level_suffix_size)
    i += 1    

def encode_CAVLC(coeffs, is_chroma_DC, skip_DC, nz_coeffs_frame, nal: Bitstream):
  nC = -1 if is_chroma_DC else compute_nC(coeffs, nz_coeffs_frame)
  trailing_zeros,total_zeros,total_nz_coeffs,nz_coeffs,zero_runs,zero_runs_idx,trailing_ones_bitmask,ntrailing_ones = gather_cavlc_stats_zigzag(coeffs, skip_DC) if not is_chroma_DC else gather_cavlc_stats_raster(coeffs)
  encode_coeff_token(nC, ntrailing_ones, total_nz_coeffs, nal)
  if total_nz_coeffs > 0:
    nal.pack(trailing_ones_bitmask, ntrailing_ones)
    encode_levels(ntrailing_ones, total_nz_coeffs, nz_coeffs, nal)
    encode_total_zeros(total_nz_coeffs, total_zeros, len(coeffs) if not skip_DC else len(coeffs)-1, nal)
    encode_runs(total_nz_coeffs, total_zeros, zero_runs_idx, zero_runs, len(coeffs) if not skip_DC else len(coeffs)-1, nal)
