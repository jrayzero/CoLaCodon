def dct4x4(inp, out):
  # horizontal
  for r in range(4):
    in_row = inp[r,:]
    out_row = out[r,:]
    p0 = in_row(0,0)
    p1 = in_row(0,1)
    p2 = in_row(0,2)
    p3 = in_row(0,3)
    t0 = p0 + p3
    t1 = p1 + p2
    t2 = p1 - p2
    t3 = p0 - p3
    out_row[0,0] = t0 + t1
    out_row[0,1] = (t3 << 1) + t2
    out_row[0,2] = t0 - t1
    out_row[0,3] = t3 - (t2 << 1)
  # vertical
  for c in range(4):
    in_col = out[:,c]
    p0 = in_col(0,0)
    p1 = in_col(1,0)
    p2 = in_col(2,0)
    p3 = in_col(3,0)
    t0 = p0 + p3
    t1 = p1 + p2
    t2 = p1 - p2
    t3 = p0 - p3
    in_col[0,0] = t0 + t1
    in_col[1,0] = t2 + (t3 << 1)
    in_col[2,0] = t0 - t1
    in_col[3,0] = t3 - (t2 << 1)

def idct4x4(inp, out):
  # horizontal
  for r in range(4):
    in_row = inp[r,:]
    out_row = out[r,:]
    t0 = in_row(0,0)
    t1 = in_row(0,1)
    t2 = in_row(0,2)
    t3 = in_row(0,3)
    p0 = t0 + t2
    p1 = t0 - t2
    p2 = (t1 >> 1) - t3
    p3 = t1 + (t3 >> 1)
    out_row[0,0] = p0 + p3
    out_row[0,1] = p1 + p2
    out_row[0,2] = p1 - p2
    out_row[0,3] = p0 - p3
  # vertical
  for c in range(4):
    in_col = out[:,c]
    t0 = in_col(0,0)
    t1 = in_col(1,0)
    t2 = in_col(2,0)
    t3 = in_col(3,0)
    p0 = t0 + t2
    p1 = t0 - t2
    p2 = (t1 >> 1) - t3
    p3 = t1 + (t3 >> 1)
    in_col[0,0] = p0 + p3
    in_col[1,0] = p1 + p2
    in_col[2,0] = p1 - p2
    in_col[3,0] = p0 - p3

def idct8x8(inp, out):
  # Horizontal  
  for r in range(8):
    in_row = inp[r,:]
    out_row = out[r,:]
    p0 = in_row(0,0)
    p1 = in_row(0,1) 
    p2 = in_row(0,2) 
    p3 = in_row(0,3) 
    p4 = in_row(0,4) 
    p5 = in_row(0,5) 
    p6 = in_row(0,6) 
    p7 = in_row(0,7) 
    
    a0 = p0 + p4
    a1 = p0 - p4
    a2 = p6 - (p2 >> 1)
    a3 = p2 + (p6 >> 1)
    
    b0 = a0 + a3
    b2 = a1 - a2
    b4 = a1 + a2
    b6 = a0 - a3
    
    a0 = -p3 + p5 - p7 - (p7 >> 1)    
    a1 = p1 + p7 - p3 - (p3 >> 1)    
    a2 = -p1 + p7 + p5 + (p5 >> 1)    
    a3 = p3 + p5 + p1 + (p1 >> 1)
         
    b1 = a0 + (a3>>2)    
    b3 = a1 + (a2>>2)    
    b5 = a2 - (a1>>2)
    b7 = a3 - (a0>>2)                
    
    out_row[0,0] = b0 + b7
    out_row[0,1] = b2 - b5
    out_row[0,2] = b4 + b3
    out_row[0,3] = b6 + b1
    out_row[0,4] = b6 - b1
    out_row[0,5] = b4 - b3
    out_row[0,6] = b2 + b5
    out_row[0,7] = b0 - b7
    
  #  Vertical 
  for c in range(8):
    in_col = out[:,c]
    p0 = in_col(0,0)
    p1 = in_col(0,1)
    p2 = in_col(0,2)
    p3 = in_col(0,3)
    p4 = in_col(0,4)
    p5 = in_col(0,5)
    p6 = in_col(0,6)
    p7 = in_col(0,7)
    
    a0 = p0 + p4
    a1 = p0 - p4
    a2 = p6 - (p2>>1)
    a3 = p2 + (p6>>1)
    
    b0 = a0 + a3
    b2 = a1 - a2
    b4 = a1 + a2
    b6 = a0 - a3
    
    a0 = -p3 + p5 - p7 - (p7 >> 1)
    a1 = p1 + p7 - p3 - (p3 >> 1)
    a2 = -p1 + p7 + p5 + (p5 >> 1)
    a3 = p3 + p5 + p1 + (p1 >> 1)
    
    b1 = a0 + (a3 >> 2)
    b7 = a3 - (a0 >> 2)
    b3 = a1 + (a2 >> 2)
    b5 = a2 - (a1 >> 2)
    
    in_col[0,0] = b0 + b7
    in_col[0,1] = b2 - b5
    in_col[0,2] = b4 + b3
    in_col[0,3] = b6 + b1
    in_col[0,4] = b6 - b1
    in_col[0,5] = b4 - b3
    in_col[0,6] = b2 + b5
    in_col[0,7] = b0 - b7

def hadamard2x2(inp,out):
  p0 = inp(0,0) + inp(0,1)
  p1 = inp(0,0) - inp(0,1)
  p2 = inp(1,0) + inp(1,1)
  p3 = inp(1,0) - inp(1,1)
  out[0,0] = p0 + p2
  out[0,1] = p1 + p3
  out[1,0] = p0 - p2
  out[1,1] = p1 - p3

def ihadamard2x2(inp,out):
  t0 = inp(0,0) + inp(0,1)
  t1 = inp(0,0) - inp(0,1)
  t2 = inp(1,0) + inp(1,1)
  t3 = inp(1,0) - inp(1,1)
  out[0,0] = t0 + t2
  out[0,1] = t1 + t3
  out[1,0] = t0 - t2
  out[1,1] = t1 - t3

def hadamard4x4(inp, out):
  # horizontal
  for r in range(4):
    in_row = inp[r,:]
    out_row = out[r,:]
    p0 = in_row(0,0)
    p1 = in_row(0,1)
    p2 = in_row(0,2)
    p3 = in_row(0,3)
    t0 = p0 + p3
    t1 = p1 + p2
    t2 = p1 - p2
    t3 = p0 - p3
    out_row[0,0] = t0 + t1
    out_row[0,1] = t3 + t2
    out_row[0,2] = t0 - t1
    out_row[0,3] = t3 - t2
  # vertical
  for c in range(4):
    in_col = out[:,c]
    p0 = in_col(0,0)
    p1 = in_col(1,0)
    p2 = in_col(2,0)
    p3 = in_col(3,0)
    t0 = p0 + p3
    t1 = p1 + p2
    t2 = p1 - p2
    t3 = p0 - p3
    in_col[0,0] = (t0 + t1) >> 1
    in_col[1,0] = (t2 + t3) >> 1
    in_col[2,0] = (t0 - t1) >> 1
    in_col[3,0] = (t3 - t2) >> 1

def ihadamard4x4(inp, out):
  # horizontal
  for r in range(4):
    in_row = inp[r,:]
    out_row = out[r,:]
    t0 = in_row(0,0)
    t1 = in_row(0,1)
    t2 = in_row(0,2)
    t3 = in_row(0,3)
    p0 = t0 + t2
    p1 = t0 - t2
    p2 = t1 - t3
    p3 = t1 + t3
    out_row[0,0] = p0 + p3
    out_row[0,1] = p1 + p2
    out_row[0,2] = p1 - p2
    out_row[0,3] = p0 - p3
  # vertical
  for c in range(4):
    in_col = out[:,c]
    t0 = in_col(0,0)
    t1 = in_col(1,0)
    t2 = in_col(2,0)
    t3 = in_col(3,0)
    p0 = t0 + t2
    p1 = t0 - t2
    p2 = t1 - t3
    p3 = t1 + t3
    in_col[0,0] = p0 + p3
    in_col[1,0] = p1 + p2
    in_col[2,0] = p1 - p2
    in_col[3,0] = p0 - p3

def hadamard4x2(inp, out):
  a0,a1,a2,a3 = inp(0),inp(1),inp(2),inp(3)
  a4,a5,a6,a7 = inp(4),inp(5),inp(6),inp(7)    
  # horizontal
  tmp = (a0+a4,a1+a5,a2+a6,a3+a7,a0-a4,a1-a5,a2-a6,a3-a7)    
  # vertical
  for i in range(0,8,4):
    p0,p1,p2,p3 = tmp[i],tmp[i+1],tmp[i+2],tmp[i+3]      
    t0 = p0 + p3
    t1 = p1 + p2
    t2 = p1 - p2
    t3 = p0 - p3      
    out[i+0,0] = t0 + t1
    out[i+1,0] = t3 + t2
    out[i+2,0] = t0 - t1      
    out[i+3,0] = t3 - t2

def ihadamard4x2(inp, out):
  a0,a1,a2,a3 = inp(0),inp(1),inp(2),inp(3)
  a4,a5,a6,a7 = inp(4),inp(5),inp(6),inp(7)    
  # horizontal
  tmp = (a0+a4,a1+a5,a2+a6,a3+a7,a0-a4,a1-a5,a2-a6,a3-a7)    
  # vertical
  for i in range(0,8,4):
    p0,p1,p2,p3 = tmp[i],tmp[i+1],tmp[i+2],tmp[i+3]      
    t0 = p0 + p2
    t1 = p0 - p2
    t2 = p1 - p3
    t3 = p1 + p3
    out[i+0,0] = t0 + t3
    out[i+1,0] = t1 + t2
    out[i+2,0] = t1 - t2
    out[i+3,0] = t0 - t3
