from cola.blocks import *
from video import *
from funcs import *
from nal_unit import *

def intra_vertical(pred, ref):
  p = ref[pred]
  h,w = pred.get_dims()
  for y in range(h):
    for x in range(w):
      pred[y,x] = p(-1,x)

def intra_horizontal(pred, ref):
  p = ref[pred]
  h,w = pred.get_dims()
  for y in range(h):
    for x in range(w):
      pred[y,x] = p(y,-1)

# predict what the decoder would pick for which prediction to use
def encode_intra_prediction_mode(mblk_like, encoder_frame, Y_4x4, nal: Bitstream):
  for Y_entropy_8x8 in mblk_like.Y_entropy_16x16.grid((8,8)):
    for Y_entropy_4x4 in Y_entropy_8x8.grid((4,4)):
      actual_mode = encoder_frame.Y_pred_modes_frame[Y_entropy_4x4](0,0)
      # so, if the mode is DC because that was best (and it was not forced b/c of things
      # not available), DC_pred_mode_predicted will be 0, I think.
      # basically, we are figuring out how the decoder would predict the mode to
      # use, and making sure to guide it appropriately
      A = encoder_frame.Y_pred_modes_frame[Y_entropy_4x4][0,-1]
      B = encoder_frame.Y_pred_modes_frame[Y_entropy_4x4][-1,0]
      DC_pred_mode_predicted = False
      # TODO would need to check blk type here for availability, not just existance
      # (important for 16x16 mode)
      if not A.exists() or not B.exists():
        DC_pred_mode_predicted = True
      intra_A_mode = 2
      intra_B_mode = 2
      if not DC_pred_mode_predicted and A.exists():
        intra_A_mode = A(0,0)
      if not DC_pred_mode_predicted and B.exists():
        intra_B_mode = B(0,0)
      predicted_pred_mode = min(intra_A_mode, intra_B_mode)
      # does this equal the mode we actually used?
      if predicted_pred_mode == actual_mode:
        nal.pack(1, 1)
      else:
        # different mode used
        # need to tell the decoder how to compute
        nal.pack(0, 1)
        # 7 possible values for rem_intra
        if actual_mode < predicted_pred_mode:
          nal.pack(actual_mode, 3)            
        else:
          nal.pack(actual_mode-1, 3)
  # chroma just gets the mode directly
  one_chroma_pred_mode = encoder_frame.one_chroma_pred_modes_frame[mblk_like.Cb_raw_8x8](0,0)
  ue(one_chroma_pred_mode, nal)
