from cola.blocks import *
from ..common.typedefs import *
from video import *
from parameter_sets import *
from constants import *
from intra_luma import *
from intra_chroma import *
from quant import *
from cavlc import *
from nal_unit import *
from macroblock import *
from cbp import *

def predict(mblk_like, encoder_frame, video, quant_tables):
  luma_intra_predict(mblk_like, encoder_frame, video, quant_tables)
  chroma_intra_predict(mblk_like, encoder_frame, video, quant_tables)

# This is the main encoding loop
def encode_loop(mblk_like, is_first_mblk, encoder_frame: EncoderFrame, video: Video, quant_tables: QuantTables, nal: Bitstream):
  if mblk_like.mb_type != I_PCM:
    # need to actually do compression-y things with this macroblock
    predict(mblk_like, encoder_frame, video, quant_tables)
    encoder_frame.mb_type[mblk_like.Y_raw_16x16][:,:] = mblk_like.mb_type
    ue(mblk_like.mb_type, nal)
    # Based on what happened with prediction, write out some initial info BEFORE writing out the actual prediction result
    encode_intra_prediction_mode(mblk_like, encoder_frame, video, nal)
    # TODO only do if not 16x16
    cbp,cbp_luma,cbp_chroma = compute_cbp(mblk_like, encoder_frame)
    me(cbp, nal)
    if cbp_luma > 0 or cbp_chroma > 0: # or is 16x16 pred mode
      se(0, nal) # mb_qp_delta      
    # now write out the results on intra prediction
    encode_cavlc(mblk_like, cbp_luma, cbp_chroma, encoder_frame, nal)
  else:
    encode_PCM_macroblock(mblk_like, video.sps, nal)
