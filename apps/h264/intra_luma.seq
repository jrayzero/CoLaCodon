from cola.blocks import *
from video import *
from funcs import *
from transform import *
from quant import *
from intra_common import *
from macroblock import *

def intra_4x4_DC_1(pred, ref):
  p = ref[pred]
  s = 4
  for v in p[-1,:]:
    s += v
  for v in p[:,-1]:
    s += v
  s >>= 3
  for y in range(4):
    for x in range(4):
      pred[y,x] = s

def intra_4x4_DC_2(pred, ref):
  p = ref[pred]
  s = 2
  for v in p[:,-1]:
    s += v
  s >>= 2
  for y in range(4):
    for x in range(4):
      pred[y,x] = s

def intra_4x4_DC_3(pred, ref):
  p = ref[pred]
  s = 2
  for v in p[-1,:]:
    s += v
  s >>= 2
  for y in range(4):
    for x in range(4):
      pred[y,x] = s

def intra_4x4_DC_4(pred, bit_depth):
  s = (1<<(bit_depth-1))
  for y in range(4):
    for x in range(4):
      pred[y,x] = s

def intra_4x4_ddl(pred, ref):
  p = ref[pred]
  for y in range(4):
    for x in range(4):
      if x == 3 and y == 3:
        pred[y,x] = (p(-1,6) + 3 * p(-1,7) + 2) >> 2
      else:
        pred[y,x] = (p(-1,x+y) + 2 * p(-1,x+y+1) + p(-1, x + y + 2) + 2) >> 2

def intra_4x4_ddr(pred, ref):
  p = ref[pred]
  for y in range(4):
    for x in range(4):
      if x > y:
        pred[y,x] = (p(-1,x-y-2)+2*p(-1,x-y-1)+p(-1,x-y)+2) >> 2
      elif x < y:
        pred[y,x] = (p(y-x-2,-1) + 2*p(y-x-1,-1) + p(y-x,-1)+2) >> 2
      else:
        pred[y,x] = (p(-1,0)+2*p(-1,-1)+p(0,-1)+2)>>2

def intra_4x4_vr(pred, ref):
  p = ref[pred]
  for y in range(4):
    for x in range(4):
      zVR = 2*x-y
      if zVR % 2 == 0:
        pred[y,x] = (p(-1,x-(y>>1)-1)+p(-1,x-(y>>1))+1)>>1
      elif zVR == -1:
        pred[y,x] = (p(0,-1)+2*p(-1,-1)+p(-1,0)+2)>>2
      elif zVR < 0:
        pred[y,x] = (p(y-1,-1)+2*p(y-2,-1)+p(y-3,-1)+2)>>2
      else:
        pred[y,x] = (p(-1,x-(y>>1)-2)+2*p(-1,x-(y>>1)-1)+p(-1,x-(y>>1))+2)>>2
        
def intra_4x4_hd(pred, ref):
  p = ref[pred]
  for y in range(4):
    for x in range(4):
      zHD = 2*y-x
      if zHD % 2 == 0:
        pred[y,x] = (p(y-(x>>1)-1,-1)+p(y-(x>>1),-1)+1)>>1
      elif zHD == -1:
        pred[y,x] = (p(0,-1)+2*p(-1,-1)+p(-1,0)+2)>>2
      elif zHD < 0:
        pred[y,x] = (p(-1,x-1)+2*p(-1,x-2)+p(-1,x-3)+2)>>2
      else:
        pred[y,x] = (p(y-(x>>1)-2,-1) + 2*p(y-(x>>1)-1,-1) + p(y-(x>>1),-1) + 2) >> 2

def intra_4x4_vl(pred, ref):
  p = ref[pred]
  for y in range(4):
    for x in range(4):
      if y == 0 or y == 2:
        pred[y,x] = (p(-1,x+(y>>1)) + p(-1,x+(y>>1)+1)) >> 1
      else:
        pred[y,x] = (p(-1,x+(y>>1)) + 2*p(-1,x+(y>>1)+1) + p(-1,x+(y>>1)+2)+2) >> 2

def intra_4x4_hup(pred, ref):
  p = ref[pred]
  for y in range(4):
    for x in range(4):
      zHU = x+2*y
      if zHU == 0 or zHU == 2 or zHU == 4:
        pred[y,x] = (p(y+(x>>1),-1)+p(y+(x>>1)+1,-1)+1) >> 1
      elif zHU == 1 or zHU == 3:
        pred[y,x] = (p(y+(x>>1),-1)+2*p(y+(x>>1)+1,-1)+p(y+(x>>1)+2,-1)+2) >> 2
      elif zHU == 5:
        pred[y,x] = (p(2,-1) + 3 * p(3,-1) + 2) >> 2
      else:
        pred[y,x] = p(3,-1)

# run the forward process on predicted values
def luma_forward_4x4(Y_smblk_4x4, Y_pred_smblk_4x4, Y_pre_code_smblk_4x4, Y_recons_4x4, qp, quant_tables):
  residual4x4(Y_smblk_4x4, Y_pred_smblk_4x4, Y_pre_code_smblk_4x4)
  dct4x4(Y_pre_code_smblk_4x4, Y_pre_code_smblk_4x4)
  basic_quantization(Y_pre_code_smblk_4x4, Y_pre_code_smblk_4x4, qp, quant_tables)

# run the inverse process for reconstruction
def luma_inverse_4x4(Y_pred_smblk_4x4, Y_pre_code_smblk_4x4, Y_recons_4x4, qp, quant_tables):
  pre_idct_scale(Y_pre_code_smblk_4x4, Y_recons_4x4, qp, quant_tables)
  idct4x4(Y_recons_4x4, Y_recons_4x4)
  post_idct_scale(Y_recons_4x4, Y_recons_4x4)

def luma_commit_recons_4x4(Y_recons_4x4, Y_pred_smblk_4x4):
  for i in range(4):
    for j in range(4):
      Y_recons_4x4[i,j] = Y_recons_4x4(i,j) + Y_pred_smblk_4x4(i,j)  

# TODO just use write...
def luma_commit_nnz_coeffs(Y_pre_code_smblk_4x4, Y_nz_smblk_4x4):
  nnz = compute_nnz_coeffs(Y_pre_code_smblk_4x4)
  for i in range(4):
    for j in range(4):
      Y_nz_smblk_4x4[i,j] = nnz

# TODO just use write...
def luma_commit_pred_mode(Y_pred_modes_smblk_4x4, mode):
  for i in range(4):
    for j in range(4):
      Y_pred_modes_smblk_4x4[i,j] = mode

def luma_DC_modes(Y_smblk_4x4, Y_recons_frame):
  Y_pred_smblk_4x4 = Block[int,Tup2](Y_smblk_4x4)
  if Y_smblk_4x4[-1,-1].exists():
    intra_4x4_DC_1(Y_pred_smblk_4x4, Y_recons_frame[Y_pred_smblk_4x4])
  elif Y_smblk_4x4[0,-1].exists():
    intra_4x4_DC_2(Y_pred_smblk_4x4, Y_recons_frame[Y_pred_smblk_4x4])
  elif Y_smblk_4x4[-1,0].exists():
    intra_4x4_DC_3(Y_pred_smblk_4x4, Y_recons_frame[Y_pred_smblk_4x4]) 
  else:
    intra_4x4_DC_4(Y_pred_smblk_4x4, 8)
  return Y_pred_smblk_4x4

# TODO TODO If either A or B is 16x16 (and you are 4x4), you HAVE to use the DC mode
# Main intra prediction loop
def luma_intra_4x4_and_reconstruct(mblk: Macroblock, encoder_frame: EncoderFrame, video: Video, quant_tables):
  Y_raw_mblk_16x16 = mblk.Y_raw_mblk_16x16
  Y_recons_frame = encoder_frame.Y_recons_frame
  qp = video.cfg.qp_init
  mblk.Y_pre_code_mblk_16x16 = Block[int,Tup2](Y_raw_mblk_16x16)
  for Y_smblk_8x8 in Y_raw_mblk_16x16.grid((8,8)):
    for Y_smblk_4x4 in Y_smblk_8x8.grid((4,4)):
      Y_pred_DC_smblk_4x4 = luma_DC_modes(Y_smblk_4x4, Y_recons_frame)
      # forward      
      Y_pre_code_smblk_4x4 = mblk.Y_pre_code_mblk_16x16[Y_pred_DC_smblk_4x4]
      Y_recons_4x4 = Y_recons_frame[Y_pred_DC_smblk_4x4]
      luma_forward_4x4(Y_smblk_4x4, Y_pred_DC_smblk_4x4, Y_pre_code_smblk_4x4, Y_recons_4x4, qp, quant_tables)
      # reconstruct
      luma_inverse_4x4(Y_pred_DC_smblk_4x4, Y_pre_code_smblk_4x4, Y_recons_4x4, qp, quant_tables)
      # record how this block was predicted
      luma_commit_recons_4x4(Y_recons_4x4, Y_pred_DC_smblk_4x4)
      # TODO this assumes just this 4x4 mode
      Y_pred_modes_smblk_4x4 = encoder_frame.Y_pred_modes_frame[Y_pred_DC_smblk_4x4]
      luma_commit_pred_mode(Y_pred_modes_smblk_4x4, intra_luma_4x4_DC)
      Y_nz_smblk_4x4 = encoder_frame.Y_nz_coeffs_frame[Y_pred_DC_smblk_4x4]
      luma_commit_nnz_coeffs(Y_pre_code_smblk_4x4, Y_nz_smblk_4x4)

def try_mode(Y_smblk_4x4, Y_recons_frame, mode, mode_id, modes, preds):
  pred = Block[int,Tup2](Y_smblk_4x4)
  mode(pred, Y_recons_frame)
  modes.append(mode_id)
  preds.append(pred)

# this tries all the prediction modes
def full_complexity_intra(mblk: Macroblock, encoder_frame: EncoderFrame, video: Video, quant_tables):
  Y_raw_mblk_16x16 = mblk.Y_raw_mblk_16x16
  Y_recons_frame = encoder_frame.Y_recons_frame
  mblk.Y_pre_code_mblk_16x16 = Block[int,Tup2](Y_raw_mblk_16x16)
  # the final prediction
  Y_pred_mblk_16x16 = Block[int,Tup2](Y_raw_mblk_16x16)
  for Y_smblk_8x8 in Y_raw_mblk_16x16.grid((8,8)):
    for Y_smblk_4x4 in Y_smblk_8x8.grid((4,4)):
      Y_pred_DC = luma_DC_modes(Y_smblk_4x4, Y_recons_frame)
      modes = [intra_luma_4x4_DC]
      preds = [Y_pred_DC]
      y,x = Y_smblk_4x4.get_starts()
      if y > 0:
        try_mode(Y_smblk_4x4, Y_recons_frame, intra_vertical, intra_luma_4x4_vertical, modes, preds)
      if x > 0:
        try_mode(Y_smblk_4x4, Y_recons_frame, intra_horizontal, intra_luma_4x4_horizontal, modes, preds)
#      area = Y_recons_frame[Y_smblk_4x4][-1,4] 
#      wrt = area.starts_relative_to(Y_pred_mblk_16x16)
#      valid = area.exists()
#      if (wrt[1] == 12 and wrt[0] != 0) or (wrt[1] == 4 and (wrt[0] == 4 or wrt[0] ==# 12)):
#        valid = False
#      if valid:
#        try_mode(Y_smblk_4x4, Y_recons_frame, intra_4x4_ddl, intra_luma_4x4_diagonal_down_left, modes, preds)
      if x > 0 and y > 0:
        try_mode(Y_smblk_4x4, Y_recons_frame, intra_4x4_ddr, intra_luma_4x4_diagonal_down_right, modes, preds)
      if x > 0 and y > 0:
        try_mode(Y_smblk_4x4, Y_recons_frame, intra_4x4_vr, intra_luma_4x4_vertical_right, modes, preds)
      if x > 0 and y > 0:
        try_mode(Y_smblk_4x4, Y_recons_frame, intra_4x4_hd, intra_luma_4x4_horizontal_down, modes, preds)
#      if y > 0 and Y_recons_frame[Y_smblk_4x4][0,4].exists():
#        try_mode(Y_smblk_4x4, Y_recons_frame, intra_4x4_vl, intra_luma_4x4_vertical_left, modes, preds)
      if x > 0:
        try_mode(Y_smblk_4x4, Y_recons_frame, intra_4x4_hup, intra_luma_4x4_horizontal_up, modes, preds)      
      Y_ssds = compute_all_costs(sad, Y_smblk_4x4, preds)
      # now pick the best one
      idx = 0
      best_cost = 99999999
      best_idx = 0
      for cost in Y_ssds:
        if cost < best_cost:
          best_cost = cost
          best_idx = idx
        idx += 1
      Y_pred_modes_smblk_4x4 = encoder_frame.Y_pred_modes_frame[Y_smblk_4x4]
      luma_commit_pred_mode(Y_pred_modes_smblk_4x4, modes[best_idx])
      for i in range(4):
        for j in range(4):
          Y_pred_mblk_16x16[Y_pred_modes_smblk_4x4][i,j] = preds[best_idx](i,j)
      # Need to do the rest of the pipeline immediately since it's necessary for reconstruction
      # forward      
      Y_pre_code_smblk_4x4 = mblk.Y_pre_code_mblk_16x16[Y_smblk_4x4]
      Y_recons_4x4 = Y_recons_frame[Y_smblk_4x4]
      luma_forward_4x4(Y_smblk_4x4, Y_pred_mblk_16x16[Y_smblk_4x4], Y_pre_code_smblk_4x4, Y_recons_4x4, video.cfg.qp_init, quant_tables)
      # reconstruct
      luma_inverse_4x4(Y_pred_mblk_16x16[Y_smblk_4x4], Y_pre_code_smblk_4x4, Y_recons_4x4, video.cfg.qp_init, quant_tables)
      # record how this block was predicted
      luma_commit_recons_4x4(Y_recons_4x4, Y_pred_mblk_16x16[Y_smblk_4x4])
      Y_nz_smblk_4x4 = encoder_frame.Y_nz_coeffs_frame[Y_smblk_4x4]
      luma_commit_nnz_coeffs(Y_pre_code_smblk_4x4, Y_nz_smblk_4x4)
#      print luma_mode_to_str(modes[best_idx])
