from cola.blocks import *
from constants import *
from typedefs import *

@dataclass(init=False)
class SPS:
  sps_id: int
  profile_idc: int
  level_idc: int
  constraint_set0_flag: bool
  constraint_set1_flag: bool
  constraint_set2_flag: bool
  constraint_set3_flag: bool
  constraint_set4_flag: bool
  constraint_set5_flag: bool
  seq_parameter_set_id: int
  log2_max_frame_num_minus4: int
  pic_order_cnt_type: int
  log2_max_pic_order_cnt_lsb_minus4: int
  max_num_ref_frames: int
  gaps_in_frame_num_value_allowed_flag: bool
  pic_width_in_mbs_minus1: int
  pic_height_in_map_units_minus1: int
  frame_mbs_only_flag: bool
  direct_8x8_inference_flag: bool
  frame_cropping_flag: bool
  vui_parameters_present_flag: bool

  def __init__(self):
    self.sps_id = 0
    self.profile_idc = 0
    self.level_idc =0
    self.constraint_set0_flag = False
    self.constraint_set1_flag = False
    self.constraint_set2_flag = False
    self.constraint_set3_flag = False
    self.constraint_set4_flag = False
    self.constraint_set5_flag = False
    self.seq_parameter_set_id = 0
    self.log2_max_frame_num_minus4 = 0
    self.pic_order_cnt_type = 0
    self.log2_max_pic_order_cnt_lsb_minus4 = 0
    self.max_num_ref_frames = 5
    self.gaps_in_frame_num_value_allowed_flag = False
    self.pic_width_in_mbs_minus1 = 0
    self.pic_height_in_map_units_minus1 = 0
    self.frame_mbs_only_flag = True
    self.direct_8x8_inference_flag = True 
    self.frame_cropping_flag = False
    self.vui_parameters_present_flag = False

@dataclass(init=False)
class PPS:
  pps_id: int
  sps_id: int
  entropy_coding_mode: int
  bottom_field_pic_order_in_frame_present_flag: bool
  num_slice_groups_minus1: int
  num_ref_idx_l0_default_active_minus1: int
  num_ref_idx_l1_default_active_minus1: int
  weighted_pred_flag: int
  weighted_bipred_idc: int
  pic_init_qp_minus26: int
  pic_init_qs_minus26: int
  chroma_qp_index_offset: int
  deblocking_filter_control_present_flag: bool
  constrained_intra_pred_flag: bool
  redundant_pic_cnt_present_flag: bool

  def __init__(self):
    self.pps_id = 0
    self.sps_id = 0
    self.entropy_coding_mode = 0
    self.bottom_field_pic_order_in_frame_present_flag = False
    self.num_slice_groups_minus1 = 0
    self.num_ref_idx_l0_default_active_minus1 = 4
    self.num_ref_idx_l1_default_active_minus1 = 4
    self.weighted_pred_flag = 0
    self.weighted_bipred_idc = 0
    self.pic_init_qp_minus26 = 0
    self.pic_init_qs_minus26 = 0
    self.chroma_qp_index_offset = 0
    self.deblocking_filter_control_present_flag = False
    self.constrained_intra_pred_flag = False
    self.redundant_pic_cnt_present_flag = False

@dataclass(init=False)
class RefPicListModification:

  def __init__(self):
    pass

@dataclass(init=False)
class HSlice:
  ref_pic_list_modification: RefPicListModification
  is_idr_pic: bool
  nal_ref_idc: int
  nal_unit_type: int
  first_mb_in_slice: int
  slice_type: int
  pps_id: int
  frame_num: int
  idr_pic_id: int
  pic_order_cnt_lsb: int
  slice_qp_delta: int
  no_output_of_prior_pics_flag: bool
  long_term_reference_flag: bool

  def ISlice(is_idr_pic, is_pcm_slice):
    hslice = HSlice()
    hslice.is_idr_pic = is_idr_pic
    hslice.slice_type = I_SLICE_TYPE2
    if is_idr_pic:
      hslice.nal_ref_idc = NAL_REF_IDC_IDR_PIC
      hslice.nal_unit_type = NAL_UNIT_TYPE_IDR_PIC
    elif is_pcm_slice:
      hslice.nal_ref_idc = NAL_REF_IDC_PCM_SLICE
      hslice.nal_unit_type = NAL_UNIT_TYPE_PCM_SLICE
    return hslice

  def __init__(self):
    self.ref_pic_list_modification = RefPicListModification()
    self.is_idr_pic = False
    self.nal_ref_idc = 0
    self.nal_unit_type = 0
    self.first_mb_in_slice = 0
    self.slice_type = I_SLICE
    self.pps_id = 0
    self.frame_num = 0
    self.idr_pic_id = 0
    self.pic_order_cnt_lsb = 0
    self.slice_qp_delta = 0
    self.no_output_of_prior_pics_flag = False
    self.long_term_reference_flag = False

@dataclass(init=False)
class Macroblock:

  mb_type: int
  # Y,Cb,Cr
  mbs: list[View[byte,Tup2]]
  inp_frames: list[Block[byte,Tup2]]
  out_frames: list[Block[int,Tup2]]
  recons_frames: list[Block[int,Tup2]]

  def __init__(self):
    self.mb_type = 0
    
@dataclass(init=False)
class EncoderCfg:
  # Input
  input_fn: str
  height: int
  width: int
  nframes: int
  frame_rate: int
  # Output
  output_fn: str
  # General encoding
  profile: int
  level: int
  target_bitrate: int
  pcm_mode: bool
  # Intra-prediction
  disable_4x4: bool
  disable_16x16: bool
  # Motion estimation
  disable_motion_estimation: bool
  # Quantization
  qp_init: int

  def __init__(self):
    self.input_fn = ''
    self.height = -1
    self.width = -1
    self.nframes = -1
    self.frame_rate = -1
    self.output_fn = ''
    self.profile = 66
    self.level = 20
    self.target_bitrate = -1
    self.pcm_mode = False
    self.disable_4x4 = False
    self.disable_16x16 = False
    self.disable_motion_estimation = False
    self.qp_init = 26

  def __str__(self):
    s = ''
    s += f'input_fn: {self.input_fn}\n'
    s += f'height: {self.height}\n'
    s += f'width: {self.width}\n'
    s += f'nframes: {self.nframes}\n'
    s += f'frame_rate: {self.frame_rate}\n'
    s += f'output_fn: {self.output_fn}\n'
    s += f'profile: {self.profile}\n'
    s += f'level: {self.level}\n'
    s += f'target_bitrate: {self.target_bitrate}\n'
    s += f'pcm_mode = : {self.pcm_mode}\n'
    s += f'disable_4x4 = : {self.disable_4x4}\n'
    s += f'disable_16x16 = : {self.disable_16x16}\n'
    s += f'disable_motion_estimation = : {self.disable_motion_estimation}\n'
    s += f'qp_init: {self.qp_init}\n'
    return s

@dataclass(init=False)
class Frame[E]:

  frame: Block[E,Tup2]
  pps_id: int

  def __init__(self, frame, pps_id):
    self.frame = frame
    self.pps_id = pps_id
    

@dataclass(init=False)
class Video:
  
  encoder_cfg: EncoderCfg
  sps: SPS
  ppses: dict[int,PPS]
  # the current frames being processed
  input_frame: Frame[byte]
  recons_frame: Frame[int]
  # other parameters
  separate_colour_plane_flag: bool

  def __init__(self, encoder_cfg, sps):
    self.encoder_cfg = encoder_cfg
    self.sps = sps
    self.ppses = {}
    self.separate_colour_plane_flag = False

  def add_pps(self, pps):
    self.ppses[pps.pps_id] = pps
    
