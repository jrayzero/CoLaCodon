from cola.blocks import *
from video import *
from funcs import *
from transform import *
from quant import *
from intra_common import *
from macroblock import *

def intra_chroma_DC_1(pred, ref_left, ref_up):
  s = 4
  for v in ref_left[:,-1]:
    s += v
  for v in ref_up[-1,:]:
    s += v
  s >>= 3
  for y in range(4):
    for x in range(4):
      pred[y,x] = s  

def intra_chroma_DC_2(pred, ref_left):
  s = 2
  for v in ref_left[:,-1]:
    s += v
  s >>= 2
  for y in range(4):
    for x in range(4):
      pred[y,x] = s

def intra_chroma_DC_3(pred, ref_up):
  s = 2
  for v in ref_up[-1,:]:
    s += v
  s >>= 2
  for y in range(4):
    for x in range(4):
      pred[y,x] = s

def intra_chroma_DC_4(pred, bit_depth):
  s = (1<<(bit_depth-1))
  for y in range(4):
    for x in range(4):
      pred[y,x] = s

def intra_chroma_planar(pred, ref):
  p = ref[pred]
  xCF = 0
  yCF = 0
  H = 0
  V = 0
  for x in range(4):
    H += (x+1)*(p(-1,4+x)-p(-1,2-x))
  for y in range(4):
    V += (y+1)*(p(4+y,-1)-p(2-y,-1))
  a = 16 * (p(7,-1) + p(-1,7))
  b = (34*H+32) >> 6
  c = (34*V+32) >> 6
  for y in range(8):
    for x in range(8):
      pred[y,x] = clip1((a+b*(x-3)+c*(y-3)+16)>>5, 8)

def intra_predict_one_chroma_DC(one_chroma_raw_8x8, one_chroma_recons_frame):
  one_chroma_pred_8x8 = Block[int,Tup2](one_chroma_raw_8x8)
  one_chroma_recons_8x8 = one_chroma_recons_frame[one_chroma_raw_8x8]
  # we need to store all 4x4 sub predictions
  y,x = one_chroma_raw_8x8.get_starts()
  # chroma is a little funky, and literally every single text (except the spec, of course) neglects to
  # say that the chroma 4x4 blocks don't use 4x4 blocks WITHIN the chroma macroblock for prediction. 
  # Rather, they use only the 4x4 blocks from the surrounding macroblocks (so the bottom-right 4x4 
  # for example is using data ABOVE and LEFT of the MACROBLOCK)
  # just grab the individual 4x4 blocks here
  one_chroma_ul_4x4 = one_chroma_pred_8x8[:4,:4]
  one_chroma_ur_4x4 = one_chroma_pred_8x8[:4,4:]
  one_chroma_bl_4x4 = one_chroma_pred_8x8[4:,:4]
  one_chroma_br_4x4 = one_chroma_pred_8x8[4:,4:]
  # upper left block
  if y > 0 and x > 0:
    intra_chroma_DC_1(one_chroma_ul_4x4, one_chroma_recons_8x8[one_chroma_ul_4x4], one_chroma_recons_8x8[one_chroma_ul_4x4])    
  elif x > 0:
    intra_chroma_DC_2(one_chroma_ul_4x4, one_chroma_recons_8x8[one_chroma_ul_4x4])
  elif y > 0:
    intra_chroma_DC_3(one_chroma_ul_4x4, one_chroma_recons_8x8[one_chroma_ul_4x4])
  else:
    intra_chroma_DC_4(one_chroma_ul_4x4, 8)
  # bottom right block
  if y > 0 and x > 0:
    intra_chroma_DC_1(one_chroma_br_4x4, one_chroma_recons_8x8[one_chroma_bl_4x4], one_chroma_recons_8x8[one_chroma_ur_4x4])    
  elif x > 0:
    intra_chroma_DC_2(one_chroma_br_4x4, one_chroma_recons_8x8[one_chroma_bl_4x4])
  elif y > 0:
    intra_chroma_DC_3(one_chroma_br_4x4, one_chroma_recons_8x8[one_chroma_ur_4x4])
  else:
    intra_chroma_DC_4(one_chroma_br_4x4, 8)
  # upper right block
  if y > 0:
    intra_chroma_DC_3(one_chroma_ur_4x4, one_chroma_recons_8x8[one_chroma_ur_4x4])
  elif x > 0:
    intra_chroma_DC_2(one_chroma_ur_4x4, one_chroma_recons_8x8[one_chroma_ul_4x4])
  else:
    intra_chroma_DC_4(one_chroma_ur_4x4, 8)
  # bottom left block
  if x > 0:
    intra_chroma_DC_2(one_chroma_bl_4x4, one_chroma_recons_8x8[one_chroma_bl_4x4])
  elif y > 0:
    intra_chroma_DC_3(one_chroma_bl_4x4, one_chroma_recons_8x8[one_chroma_ul_4x4])
  else:
    intra_chroma_DC_4(one_chroma_bl_4x4, 8)
  return one_chroma_pred_8x8

def try_chroma_intra_mode(cond, Cb_location, Cr_location, Cb_recons_frame, Cr_recons_frame, mode_func, mode, modes, Cb_preds, Cr_preds):
  if cond:
    Cb_pred,Cr_pred = Block[int,Tup2](Cb_location),Block[int,Tup2](Cr_location)
    mode_func(Cb_pred, Cb_recons_frame)
    mode_func(Cr_pred, Cr_recons_frame)
    modes.append(mode)
    Cb_preds.append(Cb_pred)
    Cr_preds.append(Cr_pred)
   
def try_chroma_intra_modes(mblk: Macroblock, encoder_frame: EncoderFrame, do_chroma_HV, do_chroma_planar):
  Cb_raw_8x8 = mblk.Cb_raw_8x8
  Cr_raw_8x8 = mblk.Cr_raw_8x8
  Cb_recons_frame = encoder_frame.Cb_recons_frame
  Cr_recons_frame = encoder_frame.Cr_recons_frame
  mblk.Cb_entropy_8x8 = Block[int,Tup2](Cb_raw_8x8)
  mblk.Cr_entropy_8x8 = Block[int,Tup2](Cr_raw_8x8)
  # do all the valid predictions
  y,x = Cb_raw_8x8.get_starts()
  Cb_pred_DC = intra_predict_one_chroma_DC(Cb_raw_8x8, Cb_recons_frame)
  Cr_pred_DC = intra_predict_one_chroma_DC(Cr_raw_8x8, Cr_recons_frame)  
  modes = [intra_chroma_DC]
  Cb_preds = [Cb_pred_DC]
  Cr_preds = [Cr_pred_DC]
  try_chroma_intra_mode(y > 0 and do_chroma_HV, Cb_raw_8x8, Cr_raw_8x8, Cb_recons_frame, Cr_recons_frame, intra_vertical, intra_chroma_vertical, modes, Cb_preds, Cr_preds)
  try_chroma_intra_mode(x > 0 and do_chroma_HV, Cb_raw_8x8, Cr_raw_8x8, Cb_recons_frame, Cr_recons_frame, intra_horizontal, intra_chroma_horizontal, modes, Cb_preds, Cr_preds)
  try_chroma_intra_mode(x > 0 and y > 0 and do_chroma_planar, Cb_raw_8x8, Cr_raw_8x8, Cb_recons_frame, Cr_recons_frame, intra_chroma_planar, intra_chroma_plane, modes, Cb_preds, Cr_preds)
  Cb_costs = [sad(Cb_raw_8x8,pred) for pred in Cb_preds]
  Cr_costs = [sad(Cr_raw_8x8,pred) for pred in Cr_preds]
  # now pick the best one
  idx = 0
  best_cost = 99999999
  best_idx = 0
  for Cb_cost,Cr_cost in zip(Cb_costs, Cr_costs):
    total = Cb_cost + Cr_cost
    if total < best_cost:
      best_cost = total
      best_idx = idx
    idx += 1
  return modes[best_idx],Cb_preds[best_idx],Cr_preds[best_idx]
  
def one_chroma_nnz_coeffs(one_chroma_entropy_8x8, one_chroma_nz_frame):
  for one_chroma_entropy_4x4 in one_chroma_entropy_8x8.grid((4,4)):
    one_chroma_nz_4x4 = one_chroma_nz_frame[one_chroma_entropy_4x4]
    nnz = compute_nnz_coeffs(one_chroma_entropy_4x4)
    if one_chroma_entropy_4x4(0,0) != 0:
      # don't want to include the DC coeff in this count since it is coded separately
      nnz -= 1
    one_chroma_nz_4x4[:,:] = nnz

def chroma_nnz_coeffs(mblk, encoder_frame):
  one_chroma_nnz_coeffs(mblk.Cb_entropy_8x8, encoder_frame.Cb_nz_coeffs_frame)
  one_chroma_nnz_coeffs(mblk.Cr_entropy_8x8, encoder_frame.Cr_nz_coeffs_frame)

def chroma_intra_predict(mblk: Macroblock, encoder_frame, video, quant_tables):
  # do just the prediction
  Cb_raw_8x8 = mblk.Cb_raw_8x8
  Cr_raw_8x8 = mblk.Cr_raw_8x8
  do_HV = video.cfg.chroma_all or video.cfg.chroma_HV
  do_planar = video.cfg.chroma_all or video.cfg.chroma_planar
  best_mode,Cb_pred_8x8,Cr_pred_8x8 = try_chroma_intra_modes(mblk, encoder_frame, do_HV, do_planar)
  # now the forward/inverse processing
  chroma_forward_4x4(mblk, Cb_pred_8x8, Cr_pred_8x8, encoder_frame, video.cfg.qp_init, quant_tables)
  chroma_inverse_4x4(mblk, Cb_pred_8x8, Cr_pred_8x8, encoder_frame, video.cfg.qp_init, quant_tables)
  # now commit all the stuff
  chroma_recons_4x4(mblk, Cb_pred_8x8, Cr_pred_8x8, encoder_frame)
  encoder_frame.one_chroma_pred_modes_frame[Cb_raw_8x8] = best_mode
  chroma_nnz_coeffs(mblk, encoder_frame)
