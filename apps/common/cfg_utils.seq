def parse_str(param,value):    
  if len(value) == 0:
    print f'Empty string found for {param}'
    exit(-1)
  return value

def parse_bool(param,value):
  value = value.lower()
  if value != 'true' and value != 'false':
    print f'Expected boolean, got {value} for {param}' 
    exit(-1)
  return value == 'true'

def parse_int(param,value):
  try:
    return int(value)
  except:
    print f'Expected int, got {value} for {param}'
    exit(-1)

# parse_param => fptr
def parse_config(cfg_fn: str, parse_param, CFG: type):
  fd = open(cfg_fn, 'r')
  cfg = CFG()
  for line in fd:
    line = line.strip()
    if len(line) == 0 or line[0] == '#':
      continue
    spl = line.split()
    if len(spl) != 3:
      print 'Configuration parameter should have form: <param> = <value>'
      exit(-1)
    if spl[1].strip() != '=':
      print 'Configuration parameter should have form: <param> = <value>'
      exit(-1)      
    param,value = spl[0].strip(),spl[2].strip()
    parse_param(param,value,cfg)
  fd.close()
  return cfg
