import math

c1d4 = 362
c1d8 = 473
c3d8 = 196
c1d16 = 502
c3d16 = 426
c5d16 = 284
c7d16 = 100

FIX_0_298631336 = 2446
FIX_0_390180644 = 3196
FIX_0_541196100 = 4433
FIX_0_765366865 = 6270
FIX_0_899976223 = 7373
FIX_1_175875602 = 9633
FIX_1_501321110 = 12299
FIX_1_847759065 = 15137
FIX_1_961570560 = 16069
FIX_2_053119869 = 16819
FIX_2_562915447 = 20995
FIX_3_072711026 = 25172

def descale(x,n):
  return (x + (1 << (n-1))) >> n

# From jfdctint.c in jpeg-6b
# I think these constants might be based on byte values
def dct8x8(obj):
  for r in range(8):
    row = obj[r,:]
    tmp0 = int(row(0,0) + row(0,7))
    tmp7 = int(row(0,0) - row(0,7))
    tmp1 = int(row(0,1) + row(0,6))
    tmp6 = int(row(0,1) - row(0,6))
    tmp2 = int(row(0,2) + row(0,5))
    tmp5 = int(row(0,2) - row(0,5))
    tmp3 = int(row(0,3) + row(0,4))
    tmp4 = int(row(0,3) - row(0,4))
    tmp10 = tmp0 + tmp3
    tmp13 = tmp0 - tmp3
    tmp11 = tmp1 + tmp2
    tmp12 = tmp1 - tmp2
    row[0,0] = (tmp10 + tmp11) * 16 #<< 2
    row[0,4] = (tmp10 - tmp11) * 16#<< 2
    z1 = (tmp12 + tmp13) * FIX_0_541196100
    row[0,2] = descale(z1 + tmp13 * FIX_0_765366865, 9)#11)
    row[0,6] = descale(z1 + tmp12 * -FIX_1_847759065, 9)#11)
    z1 = tmp4 + tmp7
    z2 = tmp5 + tmp6
    z3 = tmp4 + tmp6
    z4 = tmp5 + tmp7
    z5 = (z3 + z4) * FIX_1_175875602
    tmp4 = tmp4 * FIX_0_298631336
    tmp5 = tmp5 * FIX_2_053119869
    tmp6 = tmp6 * FIX_3_072711026
    tmp7 = tmp7 * FIX_1_501321110
    z1 = z1 * -FIX_0_899976223
    z2 = z2 * -FIX_2_562915447
    z3 = z3 * -FIX_1_961570560
    z4 = z4 * -FIX_0_390180644
    z3 += z5
    z4 += z5
    row[0,7] = descale(tmp4 + z1 + z3, 9)#11)
    row[0,5] = descale(tmp5 + z2 + z4, 9)#11)
    row[0,3] = descale(tmp6 + z2 + z3, 9)#11)
    row[0,1] = descale(tmp7 + z1 + z4, 9)#11)
  for c in range(8):
    col = obj[:,c]
    tmp0 = int(col(0,0) + col(7,0))
    tmp7 = int(col(0,0) - col(7,0))
    tmp1 = int(col(1,0) + col(6,0))
    tmp6 = int(col(1,0) - col(6,0))
    tmp2 = int(col(2,0) + col(5,0))
    tmp5 = int(col(2,0) - col(5,0))
    tmp3 = int(col(3,0) + col(4,0))
    tmp4 = int(col(3,0) - col(4,0))
    tmp10 = tmp0 + tmp3
    tmp13 = tmp0 - tmp3
    tmp11 = tmp1 + tmp2
    tmp12 = tmp1 - tmp2      
    col[0,0] = descale(tmp10 + tmp11, 4)#2)
    col[4,0] = descale(tmp10 - tmp11, 4)#2)
    z1 = (tmp12 + tmp13) * FIX_0_541196100
    col[2,0] = descale(z1 + tmp13 * FIX_0_765366865, 17)#15)
    col[6,0] = descale(z1 + tmp12 * -FIX_1_847759065, 17)#15)
    z1 = tmp4 + tmp7
    z2 = tmp5 + tmp6
    z3 = tmp4 + tmp6
    z4 = tmp5 + tmp7
    z5 = (z3 + z4) * FIX_1_175875602
    tmp4 = tmp4 * FIX_0_298631336
    tmp5 = tmp5 * FIX_2_053119869
    tmp6 = tmp6 * FIX_3_072711026
    tmp7 = tmp7 * FIX_1_501321110
    z1 = z1 * -FIX_0_899976223
    z2 = z2 * -FIX_2_562915447
    z3 = z3 * -FIX_1_961570560
    z4 = z4 * -FIX_0_390180644
    z3 += z5
    z4 += z5
    col[7,0] = descale(tmp4 + z1 + z3, 17)#15)
    col[5,0] = descale(tmp5 + z2 + z4, 17)#15)
    col[3,0] = descale(tmp6 + z2 + z3, 17)#15)
    col[1,0] = descale(tmp7 + z1 + z4, 17)#15) 

def dct_clip(coeffs):
  for i in range(8):
    for j in range(8):
      coeff = coeffs(i,j)
      if coeff < -2048:
        coeff = -2048
      elif coeff > 2047:
        coeff = 2047
      coeffs[i,j] = coeff

def naive_dct_inner(coeffs, x, y):
  s = 0.0
  for u in range(8):
    for v in range(8):
      Cu = 1.0/math.sqrt(2) if u == 0 else 1.0
      Cv = 1.0/math.sqrt(2) if v == 0 else 1.0
      Fuv = float(coeffs(u,v))
      a = math.cos(math.pi*float(2*x+1)*float(u)/float(16))
      b = math.cos(math.pi*float(2*y+1)*float(v)/float(16))
      s += Cu*Cv*Fuv*a*b
  s *= 0.25
  return s

def naive_dct(coeffs):
  for x in range(8):
    for y in range(8):
      fxy = naive_dct_inner(coeffs, x, y)
      coeffs[x,y] = int(fxy)

def mscale(val):
  return val >> 9

# https://github.com/chengscott/h261
def chen_DCT(coeffs):
  # columns
  for i in range(8):    
    col = coeffs[:,i]
    a0 = int(col(0,0) + col(7,0))<<2
    c3 = int(col(0,0) - col(7,0))<<2
    a1 = int(col(1,0) + col(6,0))<<2
    c2 = int(col(1,0) - col(6,0))<<2
    a2 = int(col(2,0) + col(5,0))<<2
    c1 = int(col(2,0) - col(5,0))<<2
    a3 = int(col(3,0) + col(4,0))<<2
    c0 = int(col(3,0) - col(4,0))<<2
    b0 = a0+a3
    b1 = a1+a2
    b2 = a1-a2
    b3 = a0-a3
    col[0,0] = mscale(c1d4*(b0+b1))
    col[4,0] = mscale(c1d4*(b0-b1))
    col[2,0] = mscale((c3d8*b2)+(c1d8*b3))
    col[6,0] = mscale((c3d8*b3)-(c1d8*b2))
    b0 = mscale(c1d4*(c2-c1))
    b1 = mscale(c1d4*(c2+c1))
    a0 = c0+b0
    a1 = c0-b0
    a2 = c3-b1
    a3 = c3+b1
    col[1,0] = mscale((c7d16*a0)+(c1d16*a3))
    col[3,0] = mscale((c3d16*a2)-(c5d16*a1))
    col[5,0] = mscale((c3d16*a1)+(c5d16*a2))
    col[7,0] = mscale((c7d16*a3)-(c1d16*a0))
  for i in range(8):
    row = coeffs[i,:]
    a0 = int(row(0,0) + row(0,7))>>1
    c3 = int(row(0,0) - row(0,7))>>1
    a1 = int(row(0,1) + row(0,6))>>1
    c2 = int(row(0,1) - row(0,6))>>1
    a2 = int(row(0,2) + row(0,5))>>1
    c1 = int(row(0,2) - row(0,5))>>1
    a3 = int(row(0,3) + row(0,4))>>1
    c0 = int(row(0,3) - row(0,4))>>1 
    b0 = a0+a3
    b1 = a1+a2
    b2 = a1-a2
    b3 = a0-a3
    row[0,0] = mscale(c1d4*(b0+b1))
    row[0,4] = mscale(c1d4*(b0-b1))
    row[0,2] = mscale((c3d8*b2)+(c1d8*b3))
    row[0,6] = mscale((c3d8*b3)-(c1d8*b2))
    b0 = mscale(c1d4*(c2-c1))
    b1 = mscale(c1d4*(c2+c1))
    a0 = c0+b0
    a1 = c0-b0
    a2 = c3-b1
    a3 = c3+b1
    row[0,1] = mscale((c7d16*a0)+(c1d16*a3))
    row[0,3] = mscale((c3d16*a2)-(c5d16*a1))
    row[0,5] = mscale((c3d16*a1)+(c5d16*a2))
    row[0,7] = mscale((c7d16*a3)-(c1d16*a0))
  for i in range(8):
    for j in range(8):
      coeff = coeffs(i,j)
      coeff = (coeff-4 if coeff < 0 else coeff+4)//8
      coeffs[i,j] = coeff

def chen_IDCT(coeffs):
  for i in range(8):
    col = coeffs[:,i] 
    b0 = col(0,0)<<2
    a0 = col(1,0)<<2
    b2 = col(2,0)<<2
    a1 = col(3,0)<<2
    b1 = col(4,0)<<2
    a2 = col(5,0)<<2
    b3 = col(6,0)<<2
    a3 = col(7,0)<<2
    c0 = mscale((c7d16*a0)-(c1d16*a3))
    c1 = mscale((c3d16*a2)-(c5d16*a1))
    c2 = mscale((c3d16*a1)+(c5d16*a2))
    c3 = mscale((c1d16*a0)+(c7d16*a3))
    a0 = mscale(c1d4*(b0+b1))
    a1 = mscale(c1d4*(b0-b1))
    a2 = mscale((c3d8*b2)-(c1d8*b3))
    a3 = mscale((c1d8*b2)+(c3d8*b3))
    b0 = a0+a3
    b1 = a1+a2
    b2 = a1-a2
    b3 = a0-a3
    a0 = c0+c1
    a1 = c0-c1
    a2 = c3-c2
    a3 = c3+c2
    c0 = a0
    c1 = mscale(c1d4*(a2-a1))
    c2 = mscale(c1d4*(a2+a1))
    c3 = a3
    col[0,0] = b0+c3
    col[1,0] = b1+c2
    col[2,0] = b2+c1
    col[3,0] = b3+c0
    col[4,0] = b3-c0
    col[5,0] = b2-c1
    col[6,0] = b1-c2
    col[7,0] = b0-c3
    
  for i in range(8):
    row = coeffs[i,:]
    b0 = row(0,0)
    a0 = row(0,1)
    b2 = row(0,2) 
    a1 = row(0,3) 
    b1 = row(0,4) 
    a2 = row(0,5) 
    b3 = row(0,6) 
    a3 = row(0,7)      
    c0 = mscale((c7d16*a0)-(c1d16*a3))
    c1 = mscale((c3d16*a2)-(c5d16*a1))
    c2 = mscale((c3d16*a1)+(c5d16*a2))
    c3 = mscale((c1d16*a0)+(c7d16*a3))
    a0 = mscale(c1d4*(b0+b1))
    a1 = mscale(c1d4*(b0-b1))
    a2 = mscale((c3d8*b2)-(c1d8*b3))
    a3 = mscale((c1d8*b2)+(c3d8*b3))
    b0 = a0+a3
    b1 = a1+a2
    b2 = a1-a2
    b3 = a0-a3
    a0 = c0+c1
    a1 = c0-c1
    a2 = c3-c2
    a3 = c3+c2
    c0 = a0
    c1 = mscale(c1d4*(a2-a1))
    c2 = mscale(c1d4*(a2+a1))
    c3 = a3
    row[0,0] = b0+c3
    row[0,1] = b1+c2
    row[0,2] = b2+c1
    row[0,3] = b3+c0
    row[0,4] = b3-c0
    row[0,5] = b2-c1
    row[0,6] = b1-c2
    row[0,7] = b0-c3
  for i in range(8):
    for j in range(8):
      coeff = coeffs(i,j)
      coeffs[i,j] = (coeff - 8 if coeff < 0 else coeff + 8)//16
