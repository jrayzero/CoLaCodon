def do_quant(level, step, scale):
  return (32 * level + (1 if level > 0 else -1)*step*scale)//(2*2*step)  

def quantize(coeffs, step):
  even = step % 2 == 0
  assert step != 0
  for i in range(coeffs.get_dims()[0]):
    for j in range(coeffs.get_dims()[1]):
      coeff = coeffs(i,j)
      if even:
        coeffs[i,j] = (coeff + 1 if coeff > 0 else coeff - 1) // (2*step)
      else:
        coeffs[i,j] = coeff // (2*step)

def intra_quantize(coeffs, step):
  # quant = 4
  dc = coeffs(0,0)
  quantize(coeffs, step)
  dc = (dc + 3 if dc < 0 else dc + 4)//8 # fixed in the standard
  coeffs[0,0] = dc

def clip(coeffs, lower: Static[int], upper: Static[int]):
  for i in range(coeffs.get_dims()[0]):
    for j in range(coeffs.get_dims()[1]):
      coeff = coeffs(i,j)
      if coeff > upper:
        coeff = upper
      elif coeff < lower:
        coeff = lower
      coeffs[i,j] = coeff

def clip1(coeff, lower: Static[int], upper: Static[int]):
  if coeff > upper:
    return upper
  elif coeff < lower:
    return lower
  else:
    return coeff

def iquantize(coeffs, out_coeffs, step):
  even = step & 2 == 0
  for i in range(8):
    for j in range(8):
      coeff = coeffs(i,j)
      if coeff != 0 and even:
        out_coeffs[i,j] = step * (2 * coeff + 1) - 1 if coeff > 0 else step * (2 * coeff - 1) + 1 
      elif coeff != 0:
        out_coeffs[i,j] = step * (2 * coeff + 1) if coeff > 0 else step * (2 * coeff - 1)
      else:
        out_coeffs[i,j] = 0

def intra_iquantize(coeffs, out_coeffs, step):
  dc = coeffs(0,0)
  iquantize(coeffs, out_coeffs, step)
  dc *= 8
  out_coeffs[0,0] = dc
