PSC = 0x00010
GBSC = 0x0001
MBA_stuffing_codeword = 0b00000001111
MBA_stuffing_nbits = 11

tcoeff_0_1_first_codeword = 0b1
tcoeff_0_1_first_nbits = 1
tcoeff_0_1_not_first_codeword = 0b11
tcoeff_0_1_not_first_nbits = 2
tcoeff_EOB_codeword = 0b10
tcoeff_EOB_nbits = 2
tcoeff_escape_codeword = 0b000001
tcoeff_escape_nbits = 6

INTRA0 = 0
INTRA1 = 1
INTER0 = 2
INTER1 = 3
INTER_MC0 = 4
INTER_MC1 = 5
INTER_MC2 = 6
INTER_MC_FIL0 = 7
INTER_MC_FIL1 = 8
INTER_MC_FIL2 = 9
# operates as INTER0, but allows for the loop filter
INTER0_FIL = 10

def mtype_to_str(mtype):
  if mtype == INTRA0:
    return 'INTRA0'
  elif mtype == INTRA1:
    return 'INTRA1'
  elif mtype == INTER0:
    return 'INTER0'
  elif mtype == INTER1:
    return 'INTER1'
  elif mtype == INTER_MC0:
    return 'INTER_MC0'
  elif mtype == INTER_MC1:
    return 'INTER_MC1'
  elif mtype == INTER_MC2:
    return 'INTER_MC2'
  elif mtype == INTER_MC_FIL0:
    return 'INTER_MC_FIL0'
  elif mtype == INTER_MC_FIL1:
    return 'INTER_MC_FIL1'
  elif mtype == INTER_MC_FIL2:
    return 'INTER_MC_FIL2'
  elif mtype == INTER0_FIL:
    return 'INTER0_FIL'
  else:
    assert False  

def is_intra(t):
  return t == INTRA0 or t == INTRA1

def is_inter_only(t):
  return t == INTER0 or t == INTER1 or t == INTER0_FIL

def is_inter_mc(t):
  return t == INTER_MC0 or t == INTER_MC1 or t == INTER_MC2

def is_inter_mc_lf(t):
  return t == INTER_MC_FIL0 or t == INTER_MC_FIL1 or t == INTER_MC_FIL2

def has_mquant(mtype):
  return mtype == INTRA1 or mtype == INTER1 or mtype == INTER_MC2 or mtype == INTER_MC_FIL2

def has_mvd(mtype):
  return mtype >= INTER_MC0

def has_cbp(mtype):
  return mtype == INTER0 or mtype == INTER1 or mtype == INTER_MC1 or mtype == INTER_MC2 or mtype == INTER_MC_FIL1 or mtype == INTER_MC_FIL2
